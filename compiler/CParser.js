// Generated from C.g4 by ANTLR 4.7
// jshint ignore: start
var antlr4 = require('./antlr4/index');
var CListener = require('./CListener').CListener;
var grammarFileName = "C.g4";

var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003f\u042b\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0003\u0002\u0003\u0002\u0003\u0002\u0006\u0002\u00a2\n\u0002\r",
    "\u0002\u000e\u0002\u00a3\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0002",
    "\u0005\u0002\u00aa\n\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0005\u0003\u00bd\n\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0005\u0003\u00c7\n\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0007\u0003\u00d4\n\u0003\f\u0003\u000e\u0003\u00d7",
    "\u000b\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0007\u0004\u00df\n\u0004\f\u0004\u000e\u0004\u00e2\u000b",
    "\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u00f3\n\u0005",
    "\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u00fe\n\u0007\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0007\b\u010c\n\b\f\b\u000e\b\u010f\u000b\b\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0007",
    "\t\u011a\n\t\f\t\u000e\t\u011d\u000b\t\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0007\n\u0128\n\n\f\n\u000e",
    "\n\u012b\u000b\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u013c",
    "\n\u000b\f\u000b\u000e\u000b\u013f\u000b\u000b\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0007\f\u014a\n\f",
    "\f\f\u000e\f\u014d\u000b\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0007\r\u0155\n\r\f\r\u000e\r\u0158\u000b\r\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u0160\n",
    "\u000e\f\u000e\u000e\u000e\u0163\u000b\u000e\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0007\u000f\u016b\n",
    "\u000f\f\u000f\u000e\u000f\u016e\u000b\u000f\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u0176\n",
    "\u0010\f\u0010\u000e\u0010\u0179\u000b\u0010\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u0181\n",
    "\u0011\f\u0011\u000e\u0011\u0184\u000b\u0011\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u018c\n",
    "\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0005\u0013\u0194\n\u0013\u0003\u0014\u0003\u0014\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0007\u0015",
    "\u019e\n\u0015\f\u0015\u000e\u0015\u01a1\u000b\u0015\u0003\u0016\u0003",
    "\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0017\u0003\u0017\u0005\u0017\u01ac\n\u0017\u0003\u0018\u0006\u0018",
    "\u01af\n\u0018\r\u0018\u000e\u0018\u01b0\u0003\u0019\u0006\u0019\u01b4",
    "\n\u0019\r\u0019\u000e\u0019\u01b5\u0003\u001a\u0003\u001a\u0003\u001a",
    "\u0003\u001a\u0003\u001a\u0005\u001a\u01bd\n\u001a\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0007\u001b\u01c5",
    "\n\u001b\f\u001b\u000e\u001b\u01c8\u000b\u001b\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u01cf\n\u001c\u0003",
    "\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005",
    "\u001e\u01d7\n\u001e\u0003\u001f\u0003\u001f\u0005\u001f\u01db\n\u001f",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f",
    "\u0003\u001f\u0005\u001f\u01e4\n\u001f\u0003 \u0003 \u0003!\u0003!\u0003",
    "!\u0003!\u0003!\u0007!\u01ed\n!\f!\u000e!\u01f0\u000b!\u0003\"\u0003",
    "\"\u0005\"\u01f4\n\"\u0003\"\u0003\"\u0003#\u0003#\u0005#\u01fa\n#\u0003",
    "#\u0003#\u0005#\u01fe\n#\u0005#\u0200\n#\u0003$\u0003$\u0003$\u0003",
    "$\u0003$\u0003$\u0007$\u0208\n$\f$\u000e$\u020b\u000b$\u0003%\u0003",
    "%\u0005%\u020f\n%\u0003%\u0003%\u0005%\u0213\n%\u0003&\u0003&\u0005",
    "&\u0217\n&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u021f\n",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003&\u0005&\u0228\n&\u0003",
    "\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0007\'\u0230\n\'\f\'\u000e",
    "\'\u0233\u000b\'\u0003(\u0003(\u0003(\u0003(\u0003(\u0005(\u023a\n(",
    "\u0003)\u0003)\u0003*\u0003*\u0003*\u0003*\u0003*\u0003+\u0003+\u0003",
    ",\u0003,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0003-\u0005-\u0251\n-\u0003.\u0005.\u0254\n.\u0003.\u0003.\u0003",
    "/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0005/\u0263\n/\u0003/\u0003/\u0003/\u0003/\u0005/\u0269\n/\u0003",
    "/\u0003/\u0003/\u0005/\u026e\n/\u0003/\u0003/\u0003/\u0003/\u0003/\u0003",
    "/\u0003/\u0003/\u0003/\u0005/\u0279\n/\u0003/\u0007/\u027c\n/\f/\u000e",
    "/\u027f\u000b/\u00030\u00030\u00030\u00050\u0284\n0\u00030\u00030\u0005",
    "0\u0288\n0\u00030\u00030\u00050\u028c\n0\u00030\u00050\u028f\n0\u0003",
    "0\u00030\u00030\u00050\u0294\n0\u00070\u0296\n0\f0\u000e0\u0299\u000b",
    "0\u00031\u00031\u00031\u00031\u00031\u00071\u02a0\n1\f1\u000e1\u02a3",
    "\u000b1\u00032\u00032\u00032\u00032\u00032\u00052\u02aa\n2\u00033\u0003",
    "3\u00033\u00033\u00033\u00033\u00073\u02b2\n3\f3\u000e3\u02b5\u000b",
    "3\u00034\u00034\u00034\u00034\u00034\u00054\u02bc\n4\u00054\u02be\n",
    "4\u00035\u00035\u00035\u00035\u00035\u00035\u00075\u02c6\n5\f5\u000e",
    "5\u02c9\u000b5\u00036\u00036\u00056\u02cd\n6\u00037\u00037\u00057\u02d1",
    "\n7\u00037\u00057\u02d4\n7\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00058\u02dd\n8\u00038\u00058\u02e0\n8\u00038\u00038\u0003",
    "8\u00038\u00058\u02e6\n8\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00058\u02f6\n8\u0003",
    "8\u00058\u02f9\n8\u00038\u00038\u00038\u00058\u02fe\n8\u00038\u0005",
    "8\u0301\n8\u00038\u00038\u00038\u00038\u00038\u00058\u0308\n8\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u00038\u0003",
    "8\u00038\u00038\u00038\u00038\u00038\u00038\u00058\u031b\n8\u00038\u0007",
    "8\u031e\n8\f8\u000e8\u0321\u000b8\u00039\u00039\u0003:\u0003:\u0003",
    ":\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0003:\u0005:\u032f\n:\u0003",
    ";\u0003;\u0005;\u0333\n;\u0003;\u0003;\u0003;\u0003;\u0003;\u0005;\u033a",
    "\n;\u0003;\u0007;\u033d\n;\f;\u000e;\u0340\u000b;\u0003<\u0003<\u0003",
    "<\u0003=\u0003=\u0003=\u0003=\u0003=\u0007=\u034a\n=\f=\u000e=\u034d",
    "\u000b=\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0005>\u0355\n>\u0003",
    "?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003",
    "?\u0003?\u0007?\u0363\n?\f?\u000e?\u0366\u000b?\u0005?\u0368\n?\u0003",
    "?\u0003?\u0003?\u0003?\u0007?\u036e\n?\f?\u000e?\u0371\u000b?\u0005",
    "?\u0373\n?\u0007?\u0375\n?\f?\u000e?\u0378\u000b?\u0003?\u0003?\u0005",
    "?\u037c\n?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0003@\u0003@\u0005@\u0389\n@\u0003A\u0003A\u0005A\u038d\nA\u0003",
    "A\u0003A\u0003B\u0003B\u0003B\u0003B\u0003B\u0007B\u0396\nB\fB\u000e",
    "B\u0399\u000bB\u0003C\u0003C\u0005C\u039d\nC\u0003D\u0005D\u03a0\nD",
    "\u0003D\u0003D\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0005",
    "E\u03ab\nE\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0005E\u03b3\n",
    "E\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0005F\u03c9\nF\u0003G\u0003G\u0003G\u0005G\u03ce\nG\u0003G\u0003",
    "G\u0005G\u03d2\nG\u0003G\u0005G\u03d5\nG\u0003G\u0003G\u0005G\u03d9",
    "\nG\u0003G\u0003G\u0005G\u03dd\nG\u0005G\u03df\nG\u0003H\u0003H\u0003",
    "H\u0003H\u0005H\u03e5\nH\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0007",
    "I\u03ed\nI\fI\u000eI\u03f0\u000bI\u0003J\u0003J\u0003J\u0003J\u0003",
    "J\u0003J\u0003J\u0003J\u0003J\u0005J\u03fb\nJ\u0003J\u0003J\u0003J\u0003",
    "J\u0003J\u0005J\u0402\nJ\u0003K\u0005K\u0405\nK\u0003K\u0003K\u0003",
    "L\u0003L\u0003L\u0003L\u0003L\u0007L\u040e\nL\fL\u000eL\u0411\u000b",
    "L\u0003M\u0003M\u0003M\u0005M\u0416\nM\u0003N\u0005N\u0419\nN\u0003",
    "N\u0003N\u0005N\u041d\nN\u0003N\u0003N\u0003O\u0003O\u0003O\u0003O\u0003",
    "O\u0007O\u0426\nO\fO\u000eO\u0429\u000bO\u0003O\u0002\u001f\u0004\u0006",
    "\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e (4@FL\\^`dhn",
    "tx\u0082\u0090\u0096\u009cP\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012",
    "\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ",
    "\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e",
    "\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u0002\u000b\u0007\u00027",
    "799;;>>CD\u0003\u0002IS\u0007\u0002\t\t\u0014\u0014\u001c\u001c\"\"",
    "%%\b\u0002\f\f\u0011\u0011\u0015\u0015\u001a\u001b\u001f \'(\u0004\u0002",
    "##&&\u0006\u0002\u0003\u0003\r\r\u001d\u001d))\u0004\u0002\u0004\u0004",
    "\u0019\u0019\u0003\u0002\u0006\u0007\u0004\u0002\b\b))\u0002\u0480\u0002",
    "\u00a9\u0003\u0002\u0002\u0002\u0004\u00bc\u0003\u0002\u0002\u0002\u0006",
    "\u00d8\u0003\u0002\u0002\u0002\b\u00f2\u0003\u0002\u0002\u0002\n\u00f4",
    "\u0003\u0002\u0002\u0002\f\u00fd\u0003\u0002\u0002\u0002\u000e\u00ff",
    "\u0003\u0002\u0002\u0002\u0010\u0110\u0003\u0002\u0002\u0002\u0012\u011e",
    "\u0003\u0002\u0002\u0002\u0014\u012c\u0003\u0002\u0002\u0002\u0016\u0140",
    "\u0003\u0002\u0002\u0002\u0018\u014e\u0003\u0002\u0002\u0002\u001a\u0159",
    "\u0003\u0002\u0002\u0002\u001c\u0164\u0003\u0002\u0002\u0002\u001e\u016f",
    "\u0003\u0002\u0002\u0002 \u017a\u0003\u0002\u0002\u0002\"\u0185\u0003",
    "\u0002\u0002\u0002$\u0193\u0003\u0002\u0002\u0002&\u0195\u0003\u0002",
    "\u0002\u0002(\u0197\u0003\u0002\u0002\u0002*\u01a2\u0003\u0002\u0002",
    "\u0002,\u01ab\u0003\u0002\u0002\u0002.\u01ae\u0003\u0002\u0002\u0002",
    "0\u01b3\u0003\u0002\u0002\u00022\u01bc\u0003\u0002\u0002\u00024\u01be",
    "\u0003\u0002\u0002\u00026\u01ce\u0003\u0002\u0002\u00028\u01d0\u0003",
    "\u0002\u0002\u0002:\u01d6\u0003\u0002\u0002\u0002<\u01e3\u0003\u0002",
    "\u0002\u0002>\u01e5\u0003\u0002\u0002\u0002@\u01e7\u0003\u0002\u0002",
    "\u0002B\u01f1\u0003\u0002\u0002\u0002D\u01ff\u0003\u0002\u0002\u0002",
    "F\u0201\u0003\u0002\u0002\u0002H\u0212\u0003\u0002\u0002\u0002J\u0227",
    "\u0003\u0002\u0002\u0002L\u0229\u0003\u0002\u0002\u0002N\u0239\u0003",
    "\u0002\u0002\u0002P\u023b\u0003\u0002\u0002\u0002R\u023d\u0003\u0002",
    "\u0002\u0002T\u0242\u0003\u0002\u0002\u0002V\u0244\u0003\u0002\u0002",
    "\u0002X\u0250\u0003\u0002\u0002\u0002Z\u0253\u0003\u0002\u0002\u0002",
    "\\\u0268\u0003\u0002\u0002\u0002^\u028e\u0003\u0002\u0002\u0002`\u029a",
    "\u0003\u0002\u0002\u0002b\u02a9\u0003\u0002\u0002\u0002d\u02ab\u0003",
    "\u0002\u0002\u0002f\u02bd\u0003\u0002\u0002\u0002h\u02bf\u0003\u0002",
    "\u0002\u0002j\u02ca\u0003\u0002\u0002\u0002l\u02d3\u0003\u0002\u0002",
    "\u0002n\u02f8\u0003\u0002\u0002\u0002p\u0322\u0003\u0002\u0002\u0002",
    "r\u032e\u0003\u0002\u0002\u0002t\u0330\u0003\u0002\u0002\u0002v\u0341",
    "\u0003\u0002\u0002\u0002x\u0344\u0003\u0002\u0002\u0002z\u0354\u0003",
    "\u0002\u0002\u0002|\u037b\u0003\u0002\u0002\u0002~\u0388\u0003\u0002",
    "\u0002\u0002\u0080\u038a\u0003\u0002\u0002\u0002\u0082\u0390\u0003\u0002",
    "\u0002\u0002\u0084\u039c\u0003\u0002\u0002\u0002\u0086\u039f\u0003\u0002",
    "\u0002\u0002\u0088\u03b2\u0003\u0002\u0002\u0002\u008a\u03c8\u0003\u0002",
    "\u0002\u0002\u008c\u03de\u0003\u0002\u0002\u0002\u008e\u03e4\u0003\u0002",
    "\u0002\u0002\u0090\u03e6\u0003\u0002\u0002\u0002\u0092\u0401\u0003\u0002",
    "\u0002\u0002\u0094\u0404\u0003\u0002\u0002\u0002\u0096\u0408\u0003\u0002",
    "\u0002\u0002\u0098\u0415\u0003\u0002\u0002\u0002\u009a\u0418\u0003\u0002",
    "\u0002\u0002\u009c\u0420\u0003\u0002\u0002\u0002\u009e\u00aa\u0007Y",
    "\u0002\u0002\u009f\u00aa\u0007Z\u0002\u0002\u00a0\u00a2\u0007\\\u0002",
    "\u0002\u00a1\u00a0\u0003\u0002\u0002\u0002\u00a2\u00a3\u0003\u0002\u0002",
    "\u0002\u00a3\u00a1\u0003\u0002\u0002\u0002\u00a3\u00a4\u0003\u0002\u0002",
    "\u0002\u00a4\u00aa\u0003\u0002\u0002\u0002\u00a5\u00a6\u0007+\u0002",
    "\u0002\u00a6\u00a7\u0005(\u0015\u0002\u00a7\u00a8\u0007,\u0002\u0002",
    "\u00a8\u00aa\u0003\u0002\u0002\u0002\u00a9\u009e\u0003\u0002\u0002\u0002",
    "\u00a9\u009f\u0003\u0002\u0002\u0002\u00a9\u00a1\u0003\u0002\u0002\u0002",
    "\u00a9\u00a5\u0003\u0002\u0002\u0002\u00aa\u0003\u0003\u0002\u0002\u0002",
    "\u00ab\u00ac\b\u0003\u0001\u0002\u00ac\u00bd\u0005\u0002\u0002\u0002",
    "\u00ad\u00ae\u0007+\u0002\u0002\u00ae\u00af\u0005j6\u0002\u00af\u00b0",
    "\u0007,\u0002\u0002\u00b0\u00b1\u0007/\u0002\u0002\u00b1\u00b2\u0005",
    "t;\u0002\u00b2\u00b3\u00070\u0002\u0002\u00b3\u00bd\u0003\u0002\u0002",
    "\u0002\u00b4\u00b5\u0007+\u0002\u0002\u00b5\u00b6\u0005j6\u0002\u00b6",
    "\u00b7\u0007,\u0002\u0002\u00b7\u00b8\u0007/\u0002\u0002\u00b8\u00b9",
    "\u0005t;\u0002\u00b9\u00ba\u0007H\u0002\u0002\u00ba\u00bb\u00070\u0002",
    "\u0002\u00bb\u00bd\u0003\u0002\u0002\u0002\u00bc\u00ab\u0003\u0002\u0002",
    "\u0002\u00bc\u00ad\u0003\u0002\u0002\u0002\u00bc\u00b4\u0003\u0002\u0002",
    "\u0002\u00bd\u00d5\u0003\u0002\u0002\u0002\u00be\u00bf\f\n\u0002\u0002",
    "\u00bf\u00c0\u0007-\u0002\u0002\u00c0\u00c1\u0005(\u0015\u0002\u00c1",
    "\u00c2\u0007.\u0002\u0002\u00c2\u00d4\u0003\u0002\u0002\u0002\u00c3",
    "\u00c4\f\t\u0002\u0002\u00c4\u00c6\u0007+\u0002\u0002\u00c5\u00c7\u0005",
    "\u0006\u0004\u0002\u00c6\u00c5\u0003\u0002\u0002\u0002\u00c6\u00c7\u0003",
    "\u0002\u0002\u0002\u00c7\u00c8\u0003\u0002\u0002\u0002\u00c8\u00d4\u0007",
    ",\u0002\u0002\u00c9\u00ca\f\b\u0002\u0002\u00ca\u00cb\u0007W\u0002\u0002",
    "\u00cb\u00d4\u0007Y\u0002\u0002\u00cc\u00cd\f\u0007\u0002\u0002\u00cd",
    "\u00ce\u0007V\u0002\u0002\u00ce\u00d4\u0007Y\u0002\u0002\u00cf\u00d0",
    "\f\u0006\u0002\u0002\u00d0\u00d4\u00078\u0002\u0002\u00d1\u00d2\f\u0005",
    "\u0002\u0002\u00d2\u00d4\u0007:\u0002\u0002\u00d3\u00be\u0003\u0002",
    "\u0002\u0002\u00d3\u00c3\u0003\u0002\u0002\u0002\u00d3\u00c9\u0003\u0002",
    "\u0002\u0002\u00d3\u00cc\u0003\u0002\u0002\u0002\u00d3\u00cf\u0003\u0002",
    "\u0002\u0002\u00d3\u00d1\u0003\u0002\u0002\u0002\u00d4\u00d7\u0003\u0002",
    "\u0002\u0002\u00d5\u00d3\u0003\u0002\u0002\u0002\u00d5\u00d6\u0003\u0002",
    "\u0002\u0002\u00d6\u0005\u0003\u0002\u0002\u0002\u00d7\u00d5\u0003\u0002",
    "\u0002\u0002\u00d8\u00d9\b\u0004\u0001\u0002\u00d9\u00da\u0005$\u0013",
    "\u0002\u00da\u00e0\u0003\u0002\u0002\u0002\u00db\u00dc\f\u0003\u0002",
    "\u0002\u00dc\u00dd\u0007H\u0002\u0002\u00dd\u00df\u0005$\u0013\u0002",
    "\u00de\u00db\u0003\u0002\u0002\u0002\u00df\u00e2\u0003\u0002\u0002\u0002",
    "\u00e0\u00de\u0003\u0002\u0002\u0002\u00e0\u00e1\u0003\u0002\u0002\u0002",
    "\u00e1\u0007\u0003\u0002\u0002\u0002\u00e2\u00e0\u0003\u0002\u0002\u0002",
    "\u00e3\u00f3\u0005\u0004\u0003\u0002\u00e4\u00e5\u00078\u0002\u0002",
    "\u00e5\u00f3\u0005\b\u0005\u0002\u00e6\u00e7\u0007:\u0002\u0002\u00e7",
    "\u00f3\u0005\b\u0005\u0002\u00e8\u00e9\u0005\n\u0006\u0002\u00e9\u00ea",
    "\u0005\f\u0007\u0002\u00ea\u00f3\u0003\u0002\u0002\u0002\u00eb\u00ec",
    "\u0007!\u0002\u0002\u00ec\u00f3\u0005\b\u0005\u0002\u00ed\u00ee\u0007",
    "!\u0002\u0002\u00ee\u00ef\u0007+\u0002\u0002\u00ef\u00f0\u0005j6\u0002",
    "\u00f0\u00f1\u0007,\u0002\u0002\u00f1\u00f3\u0003\u0002\u0002\u0002",
    "\u00f2\u00e3\u0003\u0002\u0002\u0002\u00f2\u00e4\u0003\u0002\u0002\u0002",
    "\u00f2\u00e6\u0003\u0002\u0002\u0002\u00f2\u00e8\u0003\u0002\u0002\u0002",
    "\u00f2\u00eb\u0003\u0002\u0002\u0002\u00f2\u00ed\u0003\u0002\u0002\u0002",
    "\u00f3\t\u0003\u0002\u0002\u0002\u00f4\u00f5\t\u0002\u0002\u0002\u00f5",
    "\u000b\u0003\u0002\u0002\u0002\u00f6\u00f7\u0007+\u0002\u0002\u00f7",
    "\u00f8\u0005j6\u0002\u00f8\u00f9\u0007,\u0002\u0002\u00f9\u00fa\u0005",
    "\f\u0007\u0002\u00fa\u00fe\u0003\u0002\u0002\u0002\u00fb\u00fe\u0005",
    "\b\u0005\u0002\u00fc\u00fe\u0007[\u0002\u0002\u00fd\u00f6\u0003\u0002",
    "\u0002\u0002\u00fd\u00fb\u0003\u0002\u0002\u0002\u00fd\u00fc\u0003\u0002",
    "\u0002\u0002\u00fe\r\u0003\u0002\u0002\u0002\u00ff\u0100\b\b\u0001\u0002",
    "\u0100\u0101\u0005\f\u0007\u0002\u0101\u010d\u0003\u0002\u0002\u0002",
    "\u0102\u0103\f\u0005\u0002\u0002\u0103\u0104\u0007;\u0002\u0002\u0104",
    "\u010c\u0005\f\u0007\u0002\u0105\u0106\f\u0004\u0002\u0002\u0106\u0107",
    "\u0007<\u0002\u0002\u0107\u010c\u0005\f\u0007\u0002\u0108\u0109\f\u0003",
    "\u0002\u0002\u0109\u010a\u0007=\u0002\u0002\u010a\u010c\u0005\f\u0007",
    "\u0002\u010b\u0102\u0003\u0002\u0002\u0002\u010b\u0105\u0003\u0002\u0002",
    "\u0002\u010b\u0108\u0003\u0002\u0002\u0002\u010c\u010f\u0003\u0002\u0002",
    "\u0002\u010d\u010b\u0003\u0002\u0002\u0002\u010d\u010e\u0003\u0002\u0002",
    "\u0002\u010e\u000f\u0003\u0002\u0002\u0002\u010f\u010d\u0003\u0002\u0002",
    "\u0002\u0110\u0111\b\t\u0001\u0002\u0111\u0112\u0005\u000e\b\u0002\u0112",
    "\u011b\u0003\u0002\u0002\u0002\u0113\u0114\f\u0004\u0002\u0002\u0114",
    "\u0115\u00077\u0002\u0002\u0115\u011a\u0005\u000e\b\u0002\u0116\u0117",
    "\f\u0003\u0002\u0002\u0117\u0118\u00079\u0002\u0002\u0118\u011a\u0005",
    "\u000e\b\u0002\u0119\u0113\u0003\u0002\u0002\u0002\u0119\u0116\u0003",
    "\u0002\u0002\u0002\u011a\u011d\u0003\u0002\u0002\u0002\u011b\u0119\u0003",
    "\u0002\u0002\u0002\u011b\u011c\u0003\u0002\u0002\u0002\u011c\u0011\u0003",
    "\u0002\u0002\u0002\u011d\u011b\u0003\u0002\u0002\u0002\u011e\u011f\b",
    "\n\u0001\u0002\u011f\u0120\u0005\u0010\t\u0002\u0120\u0129\u0003\u0002",
    "\u0002\u0002\u0121\u0122\f\u0004\u0002\u0002\u0122\u0123\u00075\u0002",
    "\u0002\u0123\u0128\u0005\u0010\t\u0002\u0124\u0125\f\u0003\u0002\u0002",
    "\u0125\u0126\u00076\u0002\u0002\u0126\u0128\u0005\u0010\t\u0002\u0127",
    "\u0121\u0003\u0002\u0002\u0002\u0127\u0124\u0003\u0002\u0002\u0002\u0128",
    "\u012b\u0003\u0002\u0002\u0002\u0129\u0127\u0003\u0002\u0002\u0002\u0129",
    "\u012a\u0003\u0002\u0002\u0002\u012a\u0013\u0003\u0002\u0002\u0002\u012b",
    "\u0129\u0003\u0002\u0002\u0002\u012c\u012d\b\u000b\u0001\u0002\u012d",
    "\u012e\u0005\u0012\n\u0002\u012e\u013d\u0003\u0002\u0002\u0002\u012f",
    "\u0130\f\u0006\u0002\u0002\u0130\u0131\u00071\u0002\u0002\u0131\u013c",
    "\u0005\u0012\n\u0002\u0132\u0133\f\u0005\u0002\u0002\u0133\u0134\u0007",
    "3\u0002\u0002\u0134\u013c\u0005\u0012\n\u0002\u0135\u0136\f\u0004\u0002",
    "\u0002\u0136\u0137\u00072\u0002\u0002\u0137\u013c\u0005\u0012\n\u0002",
    "\u0138\u0139\f\u0003\u0002\u0002\u0139\u013a\u00074\u0002\u0002\u013a",
    "\u013c\u0005\u0012\n\u0002\u013b\u012f\u0003\u0002\u0002\u0002\u013b",
    "\u0132\u0003\u0002\u0002\u0002\u013b\u0135\u0003\u0002\u0002\u0002\u013b",
    "\u0138\u0003\u0002\u0002\u0002\u013c\u013f\u0003\u0002\u0002\u0002\u013d",
    "\u013b\u0003\u0002\u0002\u0002\u013d\u013e\u0003\u0002\u0002\u0002\u013e",
    "\u0015\u0003\u0002\u0002\u0002\u013f\u013d\u0003\u0002\u0002\u0002\u0140",
    "\u0141\b\f\u0001\u0002\u0141\u0142\u0005\u0014\u000b\u0002\u0142\u014b",
    "\u0003\u0002\u0002\u0002\u0143\u0144\f\u0004\u0002\u0002\u0144\u0145",
    "\u0007T\u0002\u0002\u0145\u014a\u0005\u0014\u000b\u0002\u0146\u0147",
    "\f\u0003\u0002\u0002\u0147\u0148\u0007U\u0002\u0002\u0148\u014a\u0005",
    "\u0014\u000b\u0002\u0149\u0143\u0003\u0002\u0002\u0002\u0149\u0146\u0003",
    "\u0002\u0002\u0002\u014a\u014d\u0003\u0002\u0002\u0002\u014b\u0149\u0003",
    "\u0002\u0002\u0002\u014b\u014c\u0003\u0002\u0002\u0002\u014c\u0017\u0003",
    "\u0002\u0002\u0002\u014d\u014b\u0003\u0002\u0002\u0002\u014e\u014f\b",
    "\r\u0001\u0002\u014f\u0150\u0005\u0016\f\u0002\u0150\u0156\u0003\u0002",
    "\u0002\u0002\u0151\u0152\f\u0003\u0002\u0002\u0152\u0153\u0007>\u0002",
    "\u0002\u0153\u0155\u0005\u0016\f\u0002\u0154\u0151\u0003\u0002\u0002",
    "\u0002\u0155\u0158\u0003\u0002\u0002\u0002\u0156\u0154\u0003\u0002\u0002",
    "\u0002\u0156\u0157\u0003\u0002\u0002\u0002\u0157\u0019\u0003\u0002\u0002",
    "\u0002\u0158\u0156\u0003\u0002\u0002\u0002\u0159\u015a\b\u000e\u0001",
    "\u0002\u015a\u015b\u0005\u0018\r\u0002\u015b\u0161\u0003\u0002\u0002",
    "\u0002\u015c\u015d\f\u0003\u0002\u0002\u015d\u015e\u0007B\u0002\u0002",
    "\u015e\u0160\u0005\u0018\r\u0002\u015f\u015c\u0003\u0002\u0002\u0002",
    "\u0160\u0163\u0003\u0002\u0002\u0002\u0161\u015f\u0003\u0002\u0002\u0002",
    "\u0161\u0162\u0003\u0002\u0002\u0002\u0162\u001b\u0003\u0002\u0002\u0002",
    "\u0163\u0161\u0003\u0002\u0002\u0002\u0164\u0165\b\u000f\u0001\u0002",
    "\u0165\u0166\u0005\u001a\u000e\u0002\u0166\u016c\u0003\u0002\u0002\u0002",
    "\u0167\u0168\f\u0003\u0002\u0002\u0168\u0169\u0007?\u0002\u0002\u0169",
    "\u016b\u0005\u001a\u000e\u0002\u016a\u0167\u0003\u0002\u0002\u0002\u016b",
    "\u016e\u0003\u0002\u0002\u0002\u016c\u016a\u0003\u0002\u0002\u0002\u016c",
    "\u016d\u0003\u0002\u0002\u0002\u016d\u001d\u0003\u0002\u0002\u0002\u016e",
    "\u016c\u0003\u0002\u0002\u0002\u016f\u0170\b\u0010\u0001\u0002\u0170",
    "\u0171\u0005\u001c\u000f\u0002\u0171\u0177\u0003\u0002\u0002\u0002\u0172",
    "\u0173\f\u0003\u0002\u0002\u0173\u0174\u0007@\u0002\u0002\u0174\u0176",
    "\u0005\u001c\u000f\u0002\u0175\u0172\u0003\u0002\u0002\u0002\u0176\u0179",
    "\u0003\u0002\u0002\u0002\u0177\u0175\u0003\u0002\u0002\u0002\u0177\u0178",
    "\u0003\u0002\u0002\u0002\u0178\u001f\u0003\u0002\u0002\u0002\u0179\u0177",
    "\u0003\u0002\u0002\u0002\u017a\u017b\b\u0011\u0001\u0002\u017b\u017c",
    "\u0005\u001e\u0010\u0002\u017c\u0182\u0003\u0002\u0002\u0002\u017d\u017e",
    "\f\u0003\u0002\u0002\u017e\u017f\u0007A\u0002\u0002\u017f\u0181\u0005",
    "\u001e\u0010\u0002\u0180\u017d\u0003\u0002\u0002\u0002\u0181\u0184\u0003",
    "\u0002\u0002\u0002\u0182\u0180\u0003\u0002\u0002\u0002\u0182\u0183\u0003",
    "\u0002\u0002\u0002\u0183!\u0003\u0002\u0002\u0002\u0184\u0182\u0003",
    "\u0002\u0002\u0002\u0185\u018b\u0005 \u0011\u0002\u0186\u0187\u0007",
    "E\u0002\u0002\u0187\u0188\u0005(\u0015\u0002\u0188\u0189\u0007F\u0002",
    "\u0002\u0189\u018a\u0005\"\u0012\u0002\u018a\u018c\u0003\u0002\u0002",
    "\u0002\u018b\u0186\u0003\u0002\u0002\u0002\u018b\u018c\u0003\u0002\u0002",
    "\u0002\u018c#\u0003\u0002\u0002\u0002\u018d\u0194\u0005\"\u0012\u0002",
    "\u018e\u018f\u0005\b\u0005\u0002\u018f\u0190\u0005&\u0014\u0002\u0190",
    "\u0191\u0005$\u0013\u0002\u0191\u0194\u0003\u0002\u0002\u0002\u0192",
    "\u0194\u0007[\u0002\u0002\u0193\u018d\u0003\u0002\u0002\u0002\u0193",
    "\u018e\u0003\u0002\u0002\u0002\u0193\u0192\u0003\u0002\u0002\u0002\u0194",
    "%\u0003\u0002\u0002\u0002\u0195\u0196\t\u0003\u0002\u0002\u0196\'\u0003",
    "\u0002\u0002\u0002\u0197\u0198\b\u0015\u0001\u0002\u0198\u0199\u0005",
    "$\u0013\u0002\u0199\u019f\u0003\u0002\u0002\u0002\u019a\u019b\f\u0003",
    "\u0002\u0002\u019b\u019c\u0007H\u0002\u0002\u019c\u019e\u0005$\u0013",
    "\u0002\u019d\u019a\u0003\u0002\u0002\u0002\u019e\u01a1\u0003\u0002\u0002",
    "\u0002\u019f\u019d\u0003\u0002\u0002\u0002\u019f\u01a0\u0003\u0002\u0002",
    "\u0002\u01a0)\u0003\u0002\u0002\u0002\u01a1\u019f\u0003\u0002\u0002",
    "\u0002\u01a2\u01a3\u0005\"\u0012\u0002\u01a3+\u0003\u0002\u0002\u0002",
    "\u01a4\u01a5\u0005.\u0018\u0002\u01a5\u01a6\u00054\u001b\u0002\u01a6",
    "\u01a7\u0007G\u0002\u0002\u01a7\u01ac\u0003\u0002\u0002\u0002\u01a8",
    "\u01a9\u0005.\u0018\u0002\u01a9\u01aa\u0007G\u0002\u0002\u01aa\u01ac",
    "\u0003\u0002\u0002\u0002\u01ab\u01a4\u0003\u0002\u0002\u0002\u01ab\u01a8",
    "\u0003\u0002\u0002\u0002\u01ac-\u0003\u0002\u0002\u0002\u01ad\u01af",
    "\u00052\u001a\u0002\u01ae\u01ad\u0003\u0002\u0002\u0002\u01af\u01b0",
    "\u0003\u0002\u0002\u0002\u01b0\u01ae\u0003\u0002\u0002\u0002\u01b0\u01b1",
    "\u0003\u0002\u0002\u0002\u01b1/\u0003\u0002\u0002\u0002\u01b2\u01b4",
    "\u00052\u001a\u0002\u01b3\u01b2\u0003\u0002\u0002\u0002\u01b4\u01b5",
    "\u0003\u0002\u0002\u0002\u01b5\u01b3\u0003\u0002\u0002\u0002\u01b5\u01b6",
    "\u0003\u0002\u0002\u0002\u01b61\u0003\u0002\u0002\u0002\u01b7\u01bd",
    "\u00058\u001d\u0002\u01b8\u01bd\u0005:\u001e\u0002\u01b9\u01bd\u0005",
    "T+\u0002\u01ba\u01bd\u0005V,\u0002\u01bb\u01bd\u0005X-\u0002\u01bc\u01b7",
    "\u0003\u0002\u0002\u0002\u01bc\u01b8\u0003\u0002\u0002\u0002\u01bc\u01b9",
    "\u0003\u0002\u0002\u0002\u01bc\u01ba\u0003\u0002\u0002\u0002\u01bc\u01bb",
    "\u0003\u0002\u0002\u0002\u01bd3\u0003\u0002\u0002\u0002\u01be\u01bf",
    "\b\u001b\u0001\u0002\u01bf\u01c0\u00056\u001c\u0002\u01c0\u01c6\u0003",
    "\u0002\u0002\u0002\u01c1\u01c2\f\u0003\u0002\u0002\u01c2\u01c3\u0007",
    "H\u0002\u0002\u01c3\u01c5\u00056\u001c\u0002\u01c4\u01c1\u0003\u0002",
    "\u0002\u0002\u01c5\u01c8\u0003\u0002\u0002\u0002\u01c6\u01c4\u0003\u0002",
    "\u0002\u0002\u01c6\u01c7\u0003\u0002\u0002\u0002\u01c75\u0003\u0002",
    "\u0002\u0002\u01c8\u01c6\u0003\u0002\u0002\u0002\u01c9\u01cf\u0005Z",
    ".\u0002\u01ca\u01cb\u0005Z.\u0002\u01cb\u01cc\u0007I\u0002\u0002\u01cc",
    "\u01cd\u0005r:\u0002\u01cd\u01cf\u0003\u0002\u0002\u0002\u01ce\u01c9",
    "\u0003\u0002\u0002\u0002\u01ce\u01ca\u0003\u0002\u0002\u0002\u01cf7",
    "\u0003\u0002\u0002\u0002\u01d0\u01d1\t\u0004\u0002\u0002\u01d19\u0003",
    "\u0002\u0002\u0002\u01d2\u01d7\t\u0005\u0002\u0002\u01d3\u01d7\u0005",
    "<\u001f\u0002\u01d4\u01d7\u0005J&\u0002\u01d5\u01d7\u0005p9\u0002\u01d6",
    "\u01d2\u0003\u0002\u0002\u0002\u01d6\u01d3\u0003\u0002\u0002\u0002\u01d6",
    "\u01d4\u0003\u0002\u0002\u0002\u01d6\u01d5\u0003\u0002\u0002\u0002\u01d7",
    ";\u0003\u0002\u0002\u0002\u01d8\u01da\u0005> \u0002\u01d9\u01db\u0007",
    "Y\u0002\u0002\u01da\u01d9\u0003\u0002\u0002\u0002\u01da\u01db\u0003",
    "\u0002\u0002\u0002\u01db\u01dc\u0003\u0002\u0002\u0002\u01dc\u01dd\u0007",
    "/\u0002\u0002\u01dd\u01de\u0005@!\u0002\u01de\u01df\u00070\u0002\u0002",
    "\u01df\u01e4\u0003\u0002\u0002\u0002\u01e0\u01e1\u0005> \u0002\u01e1",
    "\u01e2\u0007Y\u0002\u0002\u01e2\u01e4\u0003\u0002\u0002\u0002\u01e3",
    "\u01d8\u0003\u0002\u0002\u0002\u01e3\u01e0\u0003\u0002\u0002\u0002\u01e4",
    "=\u0003\u0002\u0002\u0002\u01e5\u01e6\t\u0006\u0002\u0002\u01e6?\u0003",
    "\u0002\u0002\u0002\u01e7\u01e8\b!\u0001\u0002\u01e8\u01e9\u0005B\"\u0002",
    "\u01e9\u01ee\u0003\u0002\u0002\u0002\u01ea\u01eb\f\u0003\u0002\u0002",
    "\u01eb\u01ed\u0005B\"\u0002\u01ec\u01ea\u0003\u0002\u0002\u0002\u01ed",
    "\u01f0\u0003\u0002\u0002\u0002\u01ee\u01ec\u0003\u0002\u0002\u0002\u01ee",
    "\u01ef\u0003\u0002\u0002\u0002\u01efA\u0003\u0002\u0002\u0002\u01f0",
    "\u01ee\u0003\u0002\u0002\u0002\u01f1\u01f3\u0005D#\u0002\u01f2\u01f4",
    "\u0005F$\u0002\u01f3\u01f2\u0003\u0002\u0002\u0002\u01f3\u01f4\u0003",
    "\u0002\u0002\u0002\u01f4\u01f5\u0003\u0002\u0002\u0002\u01f5\u01f6\u0007",
    "G\u0002\u0002\u01f6C\u0003\u0002\u0002\u0002\u01f7\u01f9\u0005:\u001e",
    "\u0002\u01f8\u01fa\u0005D#\u0002\u01f9\u01f8\u0003\u0002\u0002\u0002",
    "\u01f9\u01fa\u0003\u0002\u0002\u0002\u01fa\u0200\u0003\u0002\u0002\u0002",
    "\u01fb\u01fd\u0005T+\u0002\u01fc\u01fe\u0005D#\u0002\u01fd\u01fc\u0003",
    "\u0002\u0002\u0002\u01fd\u01fe\u0003\u0002\u0002\u0002\u01fe\u0200\u0003",
    "\u0002\u0002\u0002\u01ff\u01f7\u0003\u0002\u0002\u0002\u01ff\u01fb\u0003",
    "\u0002\u0002\u0002\u0200E\u0003\u0002\u0002\u0002\u0201\u0202\b$\u0001",
    "\u0002\u0202\u0203\u0005H%\u0002\u0203\u0209\u0003\u0002\u0002\u0002",
    "\u0204\u0205\f\u0003\u0002\u0002\u0205\u0206\u0007H\u0002\u0002\u0206",
    "\u0208\u0005H%\u0002\u0207\u0204\u0003\u0002\u0002\u0002\u0208\u020b",
    "\u0003\u0002\u0002\u0002\u0209\u0207\u0003\u0002\u0002\u0002\u0209\u020a",
    "\u0003\u0002\u0002\u0002\u020aG\u0003\u0002\u0002\u0002\u020b\u0209",
    "\u0003\u0002\u0002\u0002\u020c\u0213\u0005Z.\u0002\u020d\u020f\u0005",
    "Z.\u0002\u020e\u020d\u0003\u0002\u0002\u0002\u020e\u020f\u0003\u0002",
    "\u0002\u0002\u020f\u0210\u0003\u0002\u0002\u0002\u0210\u0211\u0007F",
    "\u0002\u0002\u0211\u0213\u0005*\u0016\u0002\u0212\u020c\u0003\u0002",
    "\u0002\u0002\u0212\u020e\u0003\u0002\u0002\u0002\u0213I\u0003\u0002",
    "\u0002\u0002\u0214\u0216\u0007\u0013\u0002\u0002\u0215\u0217\u0007Y",
    "\u0002\u0002\u0216\u0215\u0003\u0002\u0002\u0002\u0216\u0217\u0003\u0002",
    "\u0002\u0002\u0217\u0218\u0003\u0002\u0002\u0002\u0218\u0219\u0007/",
    "\u0002\u0002\u0219\u021a\u0005L\'\u0002\u021a\u021b\u00070\u0002\u0002",
    "\u021b\u0228\u0003\u0002\u0002\u0002\u021c\u021e\u0007\u0013\u0002\u0002",
    "\u021d\u021f\u0007Y\u0002\u0002\u021e\u021d\u0003\u0002\u0002\u0002",
    "\u021e\u021f\u0003\u0002\u0002\u0002\u021f\u0220\u0003\u0002\u0002\u0002",
    "\u0220\u0221\u0007/\u0002\u0002\u0221\u0222\u0005L\'\u0002\u0222\u0223",
    "\u0007H\u0002\u0002\u0223\u0224\u00070\u0002\u0002\u0224\u0228\u0003",
    "\u0002\u0002\u0002\u0225\u0226\u0007\u0013\u0002\u0002\u0226\u0228\u0007",
    "Y\u0002\u0002\u0227\u0214\u0003\u0002\u0002\u0002\u0227\u021c\u0003",
    "\u0002\u0002\u0002\u0227\u0225\u0003\u0002\u0002\u0002\u0228K\u0003",
    "\u0002\u0002\u0002\u0229\u022a\b\'\u0001\u0002\u022a\u022b\u0005N(\u0002",
    "\u022b\u0231\u0003\u0002\u0002\u0002\u022c\u022d\f\u0003\u0002\u0002",
    "\u022d\u022e\u0007H\u0002\u0002\u022e\u0230\u0005N(\u0002\u022f\u022c",
    "\u0003\u0002\u0002\u0002\u0230\u0233\u0003\u0002\u0002\u0002\u0231\u022f",
    "\u0003\u0002\u0002\u0002\u0231\u0232\u0003\u0002\u0002\u0002\u0232M",
    "\u0003\u0002\u0002\u0002\u0233\u0231\u0003\u0002\u0002\u0002\u0234\u023a",
    "\u0005P)\u0002\u0235\u0236\u0005P)\u0002\u0236\u0237\u0007I\u0002\u0002",
    "\u0237\u0238\u0005*\u0016\u0002\u0238\u023a\u0003\u0002\u0002\u0002",
    "\u0239\u0234\u0003\u0002\u0002\u0002\u0239\u0235\u0003\u0002\u0002\u0002",
    "\u023aO\u0003\u0002\u0002\u0002\u023b\u023c\u0007Y\u0002\u0002\u023c",
    "Q\u0003\u0002\u0002\u0002\u023d\u023e\u0007\u0003\u0002\u0002\u023e",
    "\u023f\u0007+\u0002\u0002\u023f\u0240\u0005j6\u0002\u0240\u0241\u0007",
    ",\u0002\u0002\u0241S\u0003\u0002\u0002\u0002\u0242\u0243\t\u0007\u0002",
    "\u0002\u0243U\u0003\u0002\u0002\u0002\u0244\u0245\t\b\u0002\u0002\u0245",
    "W\u0003\u0002\u0002\u0002\u0246\u0247\u0007\u0005\u0002\u0002\u0247",
    "\u0248\u0007+\u0002\u0002\u0248\u0249\u0005j6\u0002\u0249\u024a\u0007",
    ",\u0002\u0002\u024a\u0251\u0003\u0002\u0002\u0002\u024b\u024c\u0007",
    "\u0005\u0002\u0002\u024c\u024d\u0007+\u0002\u0002\u024d\u024e\u0005",
    "*\u0016\u0002\u024e\u024f\u0007,\u0002\u0002\u024f\u0251\u0003\u0002",
    "\u0002\u0002\u0250\u0246\u0003\u0002\u0002\u0002\u0250\u024b\u0003\u0002",
    "\u0002\u0002\u0251Y\u0003\u0002\u0002\u0002\u0252\u0254\u0005^0\u0002",
    "\u0253\u0252\u0003\u0002\u0002\u0002\u0253\u0254\u0003\u0002\u0002\u0002",
    "\u0254\u0255\u0003\u0002\u0002\u0002\u0255\u0256\u0005\\/\u0002\u0256",
    "[\u0003\u0002\u0002\u0002\u0257\u0258\b/\u0001\u0002\u0258\u0269\u0007",
    "Y\u0002\u0002\u0259\u025a\u0007+\u0002\u0002\u025a\u025b\u0005Z.\u0002",
    "\u025b\u025c\u0007,\u0002\u0002\u025c\u0269\u0003\u0002\u0002\u0002",
    "\u025d\u025e\u0007Y\u0002\u0002\u025e\u025f\u0007F\u0002\u0002\u025f",
    "\u0269\u0007[\u0002\u0002\u0260\u0262\u0007+\u0002\u0002\u0261\u0263",
    "\u0005:\u001e\u0002\u0262\u0261\u0003\u0002\u0002\u0002\u0262\u0263",
    "\u0003\u0002\u0002\u0002\u0263\u0264\u0003\u0002\u0002\u0002\u0264\u0265",
    "\u0005^0\u0002\u0265\u0266\u0005\\/\u0002\u0266\u0267\u0007,\u0002\u0002",
    "\u0267\u0269\u0003\u0002\u0002\u0002\u0268\u0257\u0003\u0002\u0002\u0002",
    "\u0268\u0259\u0003\u0002\u0002\u0002\u0268\u025d\u0003\u0002\u0002\u0002",
    "\u0268\u0260\u0003\u0002\u0002\u0002\u0269\u027d\u0003\u0002\u0002\u0002",
    "\u026a\u026b\f\u0007\u0002\u0002\u026b\u026d\u0007-\u0002\u0002\u026c",
    "\u026e\u0005$\u0013\u0002\u026d\u026c\u0003\u0002\u0002\u0002\u026d",
    "\u026e\u0003\u0002\u0002\u0002\u026e\u026f\u0003\u0002\u0002\u0002\u026f",
    "\u027c\u0007.\u0002\u0002\u0270\u0271\f\u0006\u0002\u0002\u0271\u0272",
    "\u0007+\u0002\u0002\u0272\u0273\u0005b2\u0002\u0273\u0274\u0007,\u0002",
    "\u0002\u0274\u027c\u0003\u0002\u0002\u0002\u0275\u0276\f\u0005\u0002",
    "\u0002\u0276\u0278\u0007+\u0002\u0002\u0277\u0279\u0005h5\u0002\u0278",
    "\u0277\u0003\u0002\u0002\u0002\u0278\u0279\u0003\u0002\u0002\u0002\u0279",
    "\u027a\u0003\u0002\u0002\u0002\u027a\u027c\u0007,\u0002\u0002\u027b",
    "\u026a\u0003\u0002\u0002\u0002\u027b\u0270\u0003\u0002\u0002\u0002\u027b",
    "\u0275\u0003\u0002\u0002\u0002\u027c\u027f\u0003\u0002\u0002\u0002\u027d",
    "\u027b\u0003\u0002\u0002\u0002\u027d\u027e\u0003\u0002\u0002\u0002\u027e",
    "]\u0003\u0002\u0002\u0002\u027f\u027d\u0003\u0002\u0002\u0002\u0280",
    "\u0281\b0\u0001\u0002\u0281\u0283\u0007;\u0002\u0002\u0282\u0284\u0005",
    "`1\u0002\u0283\u0282\u0003\u0002\u0002\u0002\u0283\u0284\u0003\u0002",
    "\u0002\u0002\u0284\u028f\u0003\u0002\u0002\u0002\u0285\u0287\u0007B",
    "\u0002\u0002\u0286\u0288\u0005`1\u0002\u0287\u0286\u0003\u0002\u0002",
    "\u0002\u0287\u0288\u0003\u0002\u0002\u0002\u0288\u028f\u0003\u0002\u0002",
    "\u0002\u0289\u028b\u0007B\u0002\u0002\u028a\u028c\u0005`1\u0002\u028b",
    "\u028a\u0003\u0002\u0002\u0002\u028b\u028c\u0003\u0002\u0002\u0002\u028c",
    "\u028d\u0003\u0002\u0002\u0002\u028d\u028f\u0005^0\u0003\u028e\u0280",
    "\u0003\u0002\u0002\u0002\u028e\u0285\u0003\u0002\u0002\u0002\u028e\u0289",
    "\u0003\u0002\u0002\u0002\u028f\u0297\u0003\u0002\u0002\u0002\u0290\u0291",
    "\f\u0005\u0002\u0002\u0291\u0293\u0007;\u0002\u0002\u0292\u0294\u0005",
    "`1\u0002\u0293\u0292\u0003\u0002\u0002\u0002\u0293\u0294\u0003\u0002",
    "\u0002\u0002\u0294\u0296\u0003\u0002\u0002\u0002\u0295\u0290\u0003\u0002",
    "\u0002\u0002\u0296\u0299\u0003\u0002\u0002\u0002\u0297\u0295\u0003\u0002",
    "\u0002\u0002\u0297\u0298\u0003\u0002\u0002\u0002\u0298_\u0003\u0002",
    "\u0002\u0002\u0299\u0297\u0003\u0002\u0002\u0002\u029a\u029b\b1\u0001",
    "\u0002\u029b\u029c\u0005T+\u0002\u029c\u02a1\u0003\u0002\u0002\u0002",
    "\u029d\u029e\f\u0003\u0002\u0002\u029e\u02a0\u0005T+\u0002\u029f\u029d",
    "\u0003\u0002\u0002\u0002\u02a0\u02a3\u0003\u0002\u0002\u0002\u02a1\u029f",
    "\u0003\u0002\u0002\u0002\u02a1\u02a2\u0003\u0002\u0002\u0002\u02a2a",
    "\u0003\u0002\u0002\u0002\u02a3\u02a1\u0003\u0002\u0002\u0002\u02a4\u02aa",
    "\u0005d3\u0002\u02a5\u02a6\u0005d3\u0002\u02a6\u02a7\u0007H\u0002\u0002",
    "\u02a7\u02a8\u0007X\u0002\u0002\u02a8\u02aa\u0003\u0002\u0002\u0002",
    "\u02a9\u02a4\u0003\u0002\u0002\u0002\u02a9\u02a5\u0003\u0002\u0002\u0002",
    "\u02aac\u0003\u0002\u0002\u0002\u02ab\u02ac\b3\u0001\u0002\u02ac\u02ad",
    "\u0005f4\u0002\u02ad\u02b3\u0003\u0002\u0002\u0002\u02ae\u02af\f\u0003",
    "\u0002\u0002\u02af\u02b0\u0007H\u0002\u0002\u02b0\u02b2\u0005f4\u0002",
    "\u02b1\u02ae\u0003\u0002\u0002\u0002\u02b2\u02b5\u0003\u0002\u0002\u0002",
    "\u02b3\u02b1\u0003\u0002\u0002\u0002\u02b3\u02b4\u0003\u0002\u0002\u0002",
    "\u02b4e\u0003\u0002\u0002\u0002\u02b5\u02b3\u0003\u0002\u0002\u0002",
    "\u02b6\u02b7\u0005.\u0018\u0002\u02b7\u02b8\u0005Z.\u0002\u02b8\u02be",
    "\u0003\u0002\u0002\u0002\u02b9\u02bb\u00050\u0019\u0002\u02ba\u02bc",
    "\u0005l7\u0002\u02bb\u02ba\u0003\u0002\u0002\u0002\u02bb\u02bc\u0003",
    "\u0002\u0002\u0002\u02bc\u02be\u0003\u0002\u0002\u0002\u02bd\u02b6\u0003",
    "\u0002\u0002\u0002\u02bd\u02b9\u0003\u0002\u0002\u0002\u02beg\u0003",
    "\u0002\u0002\u0002\u02bf\u02c0\b5\u0001\u0002\u02c0\u02c1\u0007Y\u0002",
    "\u0002\u02c1\u02c7\u0003\u0002\u0002\u0002\u02c2\u02c3\f\u0003\u0002",
    "\u0002\u02c3\u02c4\u0007H\u0002\u0002\u02c4\u02c6\u0007Y\u0002\u0002",
    "\u02c5\u02c2\u0003\u0002\u0002\u0002\u02c6\u02c9\u0003\u0002\u0002\u0002",
    "\u02c7\u02c5\u0003\u0002\u0002\u0002\u02c7\u02c8\u0003\u0002\u0002\u0002",
    "\u02c8i\u0003\u0002\u0002\u0002\u02c9\u02c7\u0003\u0002\u0002\u0002",
    "\u02ca\u02cc\u0005D#\u0002\u02cb\u02cd\u0005l7\u0002\u02cc\u02cb\u0003",
    "\u0002\u0002\u0002\u02cc\u02cd\u0003\u0002\u0002\u0002\u02cdk\u0003",
    "\u0002\u0002\u0002\u02ce\u02d4\u0005^0\u0002\u02cf\u02d1\u0005^0\u0002",
    "\u02d0\u02cf\u0003\u0002\u0002\u0002\u02d0\u02d1\u0003\u0002\u0002\u0002",
    "\u02d1\u02d2\u0003\u0002\u0002\u0002\u02d2\u02d4\u0005n8\u0002\u02d3",
    "\u02ce\u0003\u0002\u0002\u0002\u02d3\u02d0\u0003\u0002\u0002\u0002\u02d4",
    "m\u0003\u0002\u0002\u0002\u02d5\u02d6\b8\u0001\u0002\u02d6\u02d7\u0007",
    "+\u0002\u0002\u02d7\u02d8\u0005l7\u0002\u02d8\u02d9\u0007,\u0002\u0002",
    "\u02d9\u02f9\u0003\u0002\u0002\u0002\u02da\u02dc\u0007-\u0002\u0002",
    "\u02db\u02dd\u0005`1\u0002\u02dc\u02db\u0003\u0002\u0002\u0002\u02dc",
    "\u02dd\u0003\u0002\u0002\u0002\u02dd\u02df\u0003\u0002\u0002\u0002\u02de",
    "\u02e0\u0005$\u0013\u0002\u02df\u02de\u0003\u0002\u0002\u0002\u02df",
    "\u02e0\u0003\u0002\u0002\u0002\u02e0\u02e1\u0003\u0002\u0002\u0002\u02e1",
    "\u02f9\u0007.\u0002\u0002\u02e2\u02e3\u0007-\u0002\u0002\u02e3\u02e5",
    "\u0007\"\u0002\u0002\u02e4\u02e6\u0005`1\u0002\u02e5\u02e4\u0003\u0002",
    "\u0002\u0002\u02e5\u02e6\u0003\u0002\u0002\u0002\u02e6\u02e7\u0003\u0002",
    "\u0002\u0002\u02e7\u02e8\u0005$\u0013\u0002\u02e8\u02e9\u0007.\u0002",
    "\u0002\u02e9\u02f9\u0003\u0002\u0002\u0002\u02ea\u02eb\u0007-\u0002",
    "\u0002\u02eb\u02ec\u0005`1\u0002\u02ec\u02ed\u0007\"\u0002\u0002\u02ed",
    "\u02ee\u0005$\u0013\u0002\u02ee\u02ef\u0007.\u0002\u0002\u02ef\u02f9",
    "\u0003\u0002\u0002\u0002\u02f0\u02f1\u0007-\u0002\u0002\u02f1\u02f2",
    "\u0007;\u0002\u0002\u02f2\u02f9\u0007.\u0002\u0002\u02f3\u02f5\u0007",
    "+\u0002\u0002\u02f4\u02f6\u0005b2\u0002\u02f5\u02f4\u0003\u0002\u0002",
    "\u0002\u02f5\u02f6\u0003\u0002\u0002\u0002\u02f6\u02f7\u0003\u0002\u0002",
    "\u0002\u02f7\u02f9\u0007,\u0002\u0002\u02f8\u02d5\u0003\u0002\u0002",
    "\u0002\u02f8\u02da\u0003\u0002\u0002\u0002\u02f8\u02e2\u0003\u0002\u0002",
    "\u0002\u02f8\u02ea\u0003\u0002\u0002\u0002\u02f8\u02f0\u0003\u0002\u0002",
    "\u0002\u02f8\u02f3\u0003\u0002\u0002\u0002\u02f9\u031f\u0003\u0002\u0002",
    "\u0002\u02fa\u02fb\f\u0007\u0002\u0002\u02fb\u02fd\u0007-\u0002\u0002",
    "\u02fc\u02fe\u0005`1\u0002\u02fd\u02fc\u0003\u0002\u0002\u0002\u02fd",
    "\u02fe\u0003\u0002\u0002\u0002\u02fe\u0300\u0003\u0002\u0002\u0002\u02ff",
    "\u0301\u0005$\u0013\u0002\u0300\u02ff\u0003\u0002\u0002\u0002\u0300",
    "\u0301\u0003\u0002\u0002\u0002\u0301\u0302\u0003\u0002\u0002\u0002\u0302",
    "\u031e\u0007.\u0002\u0002\u0303\u0304\f\u0006\u0002\u0002\u0304\u0305",
    "\u0007-\u0002\u0002\u0305\u0307\u0007\"\u0002\u0002\u0306\u0308\u0005",
    "`1\u0002\u0307\u0306\u0003\u0002\u0002\u0002\u0307\u0308\u0003\u0002",
    "\u0002\u0002\u0308\u0309\u0003\u0002\u0002\u0002\u0309\u030a\u0005$",
    "\u0013\u0002\u030a\u030b\u0007.\u0002\u0002\u030b\u031e\u0003\u0002",
    "\u0002\u0002\u030c\u030d\f\u0005\u0002\u0002\u030d\u030e\u0007-\u0002",
    "\u0002\u030e\u030f\u0005`1\u0002\u030f\u0310\u0007\"\u0002\u0002\u0310",
    "\u0311\u0005$\u0013\u0002\u0311\u0312\u0007.\u0002\u0002\u0312\u031e",
    "\u0003\u0002\u0002\u0002\u0313\u0314\f\u0004\u0002\u0002\u0314\u0315",
    "\u0007-\u0002\u0002\u0315\u0316\u0007;\u0002\u0002\u0316\u031e\u0007",
    ".\u0002\u0002\u0317\u0318\f\u0003\u0002\u0002\u0318\u031a\u0007+\u0002",
    "\u0002\u0319\u031b\u0005b2\u0002\u031a\u0319\u0003\u0002\u0002\u0002",
    "\u031a\u031b\u0003\u0002\u0002\u0002\u031b\u031c\u0003\u0002\u0002\u0002",
    "\u031c\u031e\u0007,\u0002\u0002\u031d\u02fa\u0003\u0002\u0002\u0002",
    "\u031d\u0303\u0003\u0002\u0002\u0002\u031d\u030c\u0003\u0002\u0002\u0002",
    "\u031d\u0313\u0003\u0002\u0002\u0002\u031d\u0317\u0003\u0002\u0002\u0002",
    "\u031e\u0321\u0003\u0002\u0002\u0002\u031f\u031d\u0003\u0002\u0002\u0002",
    "\u031f\u0320\u0003\u0002\u0002\u0002\u0320o\u0003\u0002\u0002\u0002",
    "\u0321\u031f\u0003\u0002\u0002\u0002\u0322\u0323\u0007Y\u0002\u0002",
    "\u0323q\u0003\u0002\u0002\u0002\u0324\u032f\u0005$\u0013\u0002\u0325",
    "\u0326\u0007/\u0002\u0002\u0326\u0327\u0005t;\u0002\u0327\u0328\u0007",
    "0\u0002\u0002\u0328\u032f\u0003\u0002\u0002\u0002\u0329\u032a\u0007",
    "/\u0002\u0002\u032a\u032b\u0005t;\u0002\u032b\u032c\u0007H\u0002\u0002",
    "\u032c\u032d\u00070\u0002\u0002\u032d\u032f\u0003\u0002\u0002\u0002",
    "\u032e\u0324\u0003\u0002\u0002\u0002\u032e\u0325\u0003\u0002\u0002\u0002",
    "\u032e\u0329\u0003\u0002\u0002\u0002\u032fs\u0003\u0002\u0002\u0002",
    "\u0330\u0332\b;\u0001\u0002\u0331\u0333\u0005v<\u0002\u0332\u0331\u0003",
    "\u0002\u0002\u0002\u0332\u0333\u0003\u0002\u0002\u0002\u0333\u0334\u0003",
    "\u0002\u0002\u0002\u0334\u0335\u0005r:\u0002\u0335\u033e\u0003\u0002",
    "\u0002\u0002\u0336\u0337\f\u0003\u0002\u0002\u0337\u0339\u0007H\u0002",
    "\u0002\u0338\u033a\u0005v<\u0002\u0339\u0338\u0003\u0002\u0002\u0002",
    "\u0339\u033a\u0003\u0002\u0002\u0002\u033a\u033b\u0003\u0002\u0002\u0002",
    "\u033b\u033d\u0005r:\u0002\u033c\u0336\u0003\u0002\u0002\u0002\u033d",
    "\u0340\u0003\u0002\u0002\u0002\u033e\u033c\u0003\u0002\u0002\u0002\u033e",
    "\u033f\u0003\u0002\u0002\u0002\u033fu\u0003\u0002\u0002\u0002\u0340",
    "\u033e\u0003\u0002\u0002\u0002\u0341\u0342\u0005x=\u0002\u0342\u0343",
    "\u0007I\u0002\u0002\u0343w\u0003\u0002\u0002\u0002\u0344\u0345\b=\u0001",
    "\u0002\u0345\u0346\u0005z>\u0002\u0346\u034b\u0003\u0002\u0002\u0002",
    "\u0347\u0348\f\u0003\u0002\u0002\u0348\u034a\u0005z>\u0002\u0349\u0347",
    "\u0003\u0002\u0002\u0002\u034a\u034d\u0003\u0002\u0002\u0002\u034b\u0349",
    "\u0003\u0002\u0002\u0002\u034b\u034c\u0003\u0002\u0002\u0002\u034cy",
    "\u0003\u0002\u0002\u0002\u034d\u034b\u0003\u0002\u0002\u0002\u034e\u034f",
    "\u0007-\u0002\u0002\u034f\u0350\u0005*\u0016\u0002\u0350\u0351\u0007",
    ".\u0002\u0002\u0351\u0355\u0003\u0002\u0002\u0002\u0352\u0353\u0007",
    "W\u0002\u0002\u0353\u0355\u0007Y\u0002\u0002\u0354\u034e\u0003\u0002",
    "\u0002\u0002\u0354\u0352\u0003\u0002\u0002\u0002\u0355{\u0003\u0002",
    "\u0002\u0002\u0356\u037c\u0005~@\u0002\u0357\u037c\u0005\u0080A\u0002",
    "\u0358\u037c\u0005\u0086D\u0002\u0359\u037c\u0005\u0088E\u0002\u035a",
    "\u037c\u0005\u008aF\u0002\u035b\u037c\u0005\u0092J\u0002\u035c\u035d",
    "\t\t\u0002\u0002\u035d\u035e\t\n\u0002\u0002\u035e\u0367\u0007+\u0002",
    "\u0002\u035f\u0364\u0005 \u0011\u0002\u0360\u0361\u0007H\u0002\u0002",
    "\u0361\u0363\u0005 \u0011\u0002\u0362\u0360\u0003\u0002\u0002\u0002",
    "\u0363\u0366\u0003\u0002\u0002\u0002\u0364\u0362\u0003\u0002\u0002\u0002",
    "\u0364\u0365\u0003\u0002\u0002\u0002\u0365\u0368\u0003\u0002\u0002\u0002",
    "\u0366\u0364\u0003\u0002\u0002\u0002\u0367\u035f\u0003\u0002\u0002\u0002",
    "\u0367\u0368\u0003\u0002\u0002\u0002\u0368\u0376\u0003\u0002\u0002\u0002",
    "\u0369\u0372\u0007F\u0002\u0002\u036a\u036f\u0005 \u0011\u0002\u036b",
    "\u036c\u0007H\u0002\u0002\u036c\u036e\u0005 \u0011\u0002\u036d\u036b",
    "\u0003\u0002\u0002\u0002\u036e\u0371\u0003\u0002\u0002\u0002\u036f\u036d",
    "\u0003\u0002\u0002\u0002\u036f\u0370\u0003\u0002\u0002\u0002\u0370\u0373",
    "\u0003\u0002\u0002\u0002\u0371\u036f\u0003\u0002\u0002\u0002\u0372\u036a",
    "\u0003\u0002\u0002\u0002\u0372\u0373\u0003\u0002\u0002\u0002\u0373\u0375",
    "\u0003\u0002\u0002\u0002\u0374\u0369\u0003\u0002\u0002\u0002\u0375\u0378",
    "\u0003\u0002\u0002\u0002\u0376\u0374\u0003\u0002\u0002\u0002\u0376\u0377",
    "\u0003\u0002\u0002\u0002\u0377\u0379\u0003\u0002\u0002\u0002\u0378\u0376",
    "\u0003\u0002\u0002\u0002\u0379\u037a\u0007,\u0002\u0002\u037a\u037c",
    "\u0007G\u0002\u0002\u037b\u0356\u0003\u0002\u0002\u0002\u037b\u0357",
    "\u0003\u0002\u0002\u0002\u037b\u0358\u0003\u0002\u0002\u0002\u037b\u0359",
    "\u0003\u0002\u0002\u0002\u037b\u035a\u0003\u0002\u0002\u0002\u037b\u035b",
    "\u0003\u0002\u0002\u0002\u037b\u035c\u0003\u0002\u0002\u0002\u037c}",
    "\u0003\u0002\u0002\u0002\u037d\u037e\u0007Y\u0002\u0002\u037e\u037f",
    "\u0007F\u0002\u0002\u037f\u0389\u0005|?\u0002\u0380\u0381\u0007\u000b",
    "\u0002\u0002\u0381\u0382\u0005*\u0016\u0002\u0382\u0383\u0007F\u0002",
    "\u0002\u0383\u0384\u0005|?\u0002\u0384\u0389\u0003\u0002\u0002\u0002",
    "\u0385\u0386\u0007\u000f\u0002\u0002\u0386\u0387\u0007F\u0002\u0002",
    "\u0387\u0389\u0005|?\u0002\u0388\u037d\u0003\u0002\u0002\u0002\u0388",
    "\u0380\u0003\u0002\u0002\u0002\u0388\u0385\u0003\u0002\u0002\u0002\u0389",
    "\u007f\u0003\u0002\u0002\u0002\u038a\u038c\u0007/\u0002\u0002\u038b",
    "\u038d\u0005\u0082B\u0002\u038c\u038b\u0003\u0002\u0002\u0002\u038c",
    "\u038d\u0003\u0002\u0002\u0002\u038d\u038e\u0003\u0002\u0002\u0002\u038e",
    "\u038f\u00070\u0002\u0002\u038f\u0081\u0003\u0002\u0002\u0002\u0390",
    "\u0391\bB\u0001\u0002\u0391\u0392\u0005\u0084C\u0002\u0392\u0397\u0003",
    "\u0002\u0002\u0002\u0393\u0394\f\u0003\u0002\u0002\u0394\u0396\u0005",
    "\u0084C\u0002\u0395\u0393\u0003\u0002\u0002\u0002\u0396\u0399\u0003",
    "\u0002\u0002\u0002\u0397\u0395\u0003\u0002\u0002\u0002\u0397\u0398\u0003",
    "\u0002\u0002\u0002\u0398\u0083\u0003\u0002\u0002\u0002\u0399\u0397\u0003",
    "\u0002\u0002\u0002\u039a\u039d\u0005|?\u0002\u039b\u039d\u0005,\u0017",
    "\u0002\u039c\u039a\u0003\u0002\u0002\u0002\u039c\u039b\u0003\u0002\u0002",
    "\u0002\u039d\u0085\u0003\u0002\u0002\u0002\u039e\u03a0\u0005(\u0015",
    "\u0002\u039f\u039e\u0003\u0002\u0002\u0002\u039f\u03a0\u0003\u0002\u0002",
    "\u0002\u03a0\u03a1\u0003\u0002\u0002\u0002\u03a1\u03a2\u0007G\u0002",
    "\u0002\u03a2\u0087\u0003\u0002\u0002\u0002\u03a3\u03a4\u0007\u0018\u0002",
    "\u0002\u03a4\u03a5\u0007+\u0002\u0002\u03a5\u03a6\u0005(\u0015\u0002",
    "\u03a6\u03a7\u0007,\u0002\u0002\u03a7\u03aa\u0005|?\u0002\u03a8\u03a9",
    "\u0007\u0012\u0002\u0002\u03a9\u03ab\u0005|?\u0002\u03aa\u03a8\u0003",
    "\u0002\u0002\u0002\u03aa\u03ab\u0003\u0002\u0002\u0002\u03ab\u03b3\u0003",
    "\u0002\u0002\u0002\u03ac\u03ad\u0007$\u0002\u0002\u03ad\u03ae\u0007",
    "+\u0002\u0002\u03ae\u03af\u0005(\u0015\u0002\u03af\u03b0\u0007,\u0002",
    "\u0002\u03b0\u03b1\u0005|?\u0002\u03b1\u03b3\u0003\u0002\u0002\u0002",
    "\u03b2\u03a3\u0003\u0002\u0002\u0002\u03b2\u03ac\u0003\u0002\u0002\u0002",
    "\u03b3\u0089\u0003\u0002\u0002\u0002\u03b4\u03b5\u0007*\u0002\u0002",
    "\u03b5\u03b6\u0007+\u0002\u0002\u03b6\u03b7\u0005(\u0015\u0002\u03b7",
    "\u03b8\u0007,\u0002\u0002\u03b8\u03b9\u0005|?\u0002\u03b9\u03c9\u0003",
    "\u0002\u0002\u0002\u03ba\u03bb\u0007\u0010\u0002\u0002\u03bb\u03bc\u0005",
    "|?\u0002\u03bc\u03bd\u0007*\u0002\u0002\u03bd\u03be\u0007+\u0002\u0002",
    "\u03be\u03bf\u0005(\u0015\u0002\u03bf\u03c0\u0007,\u0002\u0002\u03c0",
    "\u03c1\u0007G\u0002\u0002\u03c1\u03c9\u0003\u0002\u0002\u0002\u03c2",
    "\u03c3\u0007\u0016\u0002\u0002\u03c3\u03c4\u0007+\u0002\u0002\u03c4",
    "\u03c5\u0005\u008cG\u0002\u03c5\u03c6\u0007,\u0002\u0002\u03c6\u03c7",
    "\u0005|?\u0002\u03c7\u03c9\u0003\u0002\u0002\u0002\u03c8\u03b4\u0003",
    "\u0002\u0002\u0002\u03c8\u03ba\u0003\u0002\u0002\u0002\u03c8\u03c2\u0003",
    "\u0002\u0002\u0002\u03c9\u008b\u0003\u0002\u0002\u0002\u03ca\u03cb\u0005",
    "\u008eH\u0002\u03cb\u03cd\u0007G\u0002\u0002\u03cc\u03ce\u0005\u0090",
    "I\u0002\u03cd\u03cc\u0003\u0002\u0002\u0002\u03cd\u03ce\u0003\u0002",
    "\u0002\u0002\u03ce\u03cf\u0003\u0002\u0002\u0002\u03cf\u03d1\u0007G",
    "\u0002\u0002\u03d0\u03d2\u0005\u0090I\u0002\u03d1\u03d0\u0003\u0002",
    "\u0002\u0002\u03d1\u03d2\u0003\u0002\u0002\u0002\u03d2\u03df\u0003\u0002",
    "\u0002\u0002\u03d3\u03d5\u0005(\u0015\u0002\u03d4\u03d3\u0003\u0002",
    "\u0002\u0002\u03d4\u03d5\u0003\u0002\u0002\u0002\u03d5\u03d6\u0003\u0002",
    "\u0002\u0002\u03d6\u03d8\u0007G\u0002\u0002\u03d7\u03d9\u0005\u0090",
    "I\u0002\u03d8\u03d7\u0003\u0002\u0002\u0002\u03d8\u03d9\u0003\u0002",
    "\u0002\u0002\u03d9\u03da\u0003\u0002\u0002\u0002\u03da\u03dc\u0007G",
    "\u0002\u0002\u03db\u03dd\u0005\u0090I\u0002\u03dc\u03db\u0003\u0002",
    "\u0002\u0002\u03dc\u03dd\u0003\u0002\u0002\u0002\u03dd\u03df\u0003\u0002",
    "\u0002\u0002\u03de\u03ca\u0003\u0002\u0002\u0002\u03de\u03d4\u0003\u0002",
    "\u0002\u0002\u03df\u008d\u0003\u0002\u0002\u0002\u03e0\u03e1\u0005.",
    "\u0018\u0002\u03e1\u03e2\u00054\u001b\u0002\u03e2\u03e5\u0003\u0002",
    "\u0002\u0002\u03e3\u03e5\u0005.\u0018\u0002\u03e4\u03e0\u0003\u0002",
    "\u0002\u0002\u03e4\u03e3\u0003\u0002\u0002\u0002\u03e5\u008f\u0003\u0002",
    "\u0002\u0002\u03e6\u03e7\bI\u0001\u0002\u03e7\u03e8\u0005$\u0013\u0002",
    "\u03e8\u03ee\u0003\u0002\u0002\u0002\u03e9\u03ea\f\u0003\u0002\u0002",
    "\u03ea\u03eb\u0007H\u0002\u0002\u03eb\u03ed\u0005$\u0013\u0002\u03ec",
    "\u03e9\u0003\u0002\u0002\u0002\u03ed\u03f0\u0003\u0002\u0002\u0002\u03ee",
    "\u03ec\u0003\u0002\u0002\u0002\u03ee\u03ef\u0003\u0002\u0002\u0002\u03ef",
    "\u0091\u0003\u0002\u0002\u0002\u03f0\u03ee\u0003\u0002\u0002\u0002\u03f1",
    "\u03f2\u0007\u0017\u0002\u0002\u03f2\u03f3\u0007Y\u0002\u0002\u03f3",
    "\u0402\u0007G\u0002\u0002\u03f4\u03f5\u0007\u000e\u0002\u0002\u03f5",
    "\u0402\u0007G\u0002\u0002\u03f6\u03f7\u0007\n\u0002\u0002\u03f7\u0402",
    "\u0007G\u0002\u0002\u03f8\u03fa\u0007\u001e\u0002\u0002\u03f9\u03fb",
    "\u0005(\u0015\u0002\u03fa\u03f9\u0003\u0002\u0002\u0002\u03fa\u03fb",
    "\u0003\u0002\u0002\u0002\u03fb\u03fc\u0003\u0002\u0002\u0002\u03fc\u0402",
    "\u0007G\u0002\u0002\u03fd\u03fe\u0007\u0017\u0002\u0002\u03fe\u03ff",
    "\u0005\b\u0005\u0002\u03ff\u0400\u0007G\u0002\u0002\u0400\u0402\u0003",
    "\u0002\u0002\u0002\u0401\u03f1\u0003\u0002\u0002\u0002\u0401\u03f4\u0003",
    "\u0002\u0002\u0002\u0401\u03f6\u0003\u0002\u0002\u0002\u0401\u03f8\u0003",
    "\u0002\u0002\u0002\u0401\u03fd\u0003\u0002\u0002\u0002\u0402\u0093\u0003",
    "\u0002\u0002\u0002\u0403\u0405\u0005\u0096L\u0002\u0404\u0403\u0003",
    "\u0002\u0002\u0002\u0404\u0405\u0003\u0002\u0002\u0002\u0405\u0406\u0003",
    "\u0002\u0002\u0002\u0406\u0407\u0007\u0002\u0002\u0003\u0407\u0095\u0003",
    "\u0002\u0002\u0002\u0408\u0409\bL\u0001\u0002\u0409\u040a\u0005\u0098",
    "M\u0002\u040a\u040f\u0003\u0002\u0002\u0002\u040b\u040c\f\u0003\u0002",
    "\u0002\u040c\u040e\u0005\u0098M\u0002\u040d\u040b\u0003\u0002\u0002",
    "\u0002\u040e\u0411\u0003\u0002\u0002\u0002\u040f\u040d\u0003\u0002\u0002",
    "\u0002\u040f\u0410\u0003\u0002\u0002\u0002\u0410\u0097\u0003\u0002\u0002",
    "\u0002\u0411\u040f\u0003\u0002\u0002\u0002\u0412\u0416\u0005\u009aN",
    "\u0002\u0413\u0416\u0005,\u0017\u0002\u0414\u0416\u0007G\u0002\u0002",
    "\u0415\u0412\u0003\u0002\u0002\u0002\u0415\u0413\u0003\u0002\u0002\u0002",
    "\u0415\u0414\u0003\u0002\u0002\u0002\u0416\u0099\u0003\u0002\u0002\u0002",
    "\u0417\u0419\u0005.\u0018\u0002\u0418\u0417\u0003\u0002\u0002\u0002",
    "\u0418\u0419\u0003\u0002\u0002\u0002\u0419\u041a\u0003\u0002\u0002\u0002",
    "\u041a\u041c\u0005Z.\u0002\u041b\u041d\u0005\u009cO\u0002\u041c\u041b",
    "\u0003\u0002\u0002\u0002\u041c\u041d\u0003\u0002\u0002\u0002\u041d\u041e",
    "\u0003\u0002\u0002\u0002\u041e\u041f\u0005\u0080A\u0002\u041f\u009b",
    "\u0003\u0002\u0002\u0002\u0420\u0421\bO\u0001\u0002\u0421\u0422\u0005",
    ",\u0017\u0002\u0422\u0427\u0003\u0002\u0002\u0002\u0423\u0424\f\u0003",
    "\u0002\u0002\u0424\u0426\u0005,\u0017\u0002\u0425\u0423\u0003\u0002",
    "\u0002\u0002\u0426\u0429\u0003\u0002\u0002\u0002\u0427\u0425\u0003\u0002",
    "\u0002\u0002\u0427\u0428\u0003\u0002\u0002\u0002\u0428\u009d\u0003\u0002",
    "\u0002\u0002\u0429\u0427\u0003\u0002\u0002\u0002y\u00a3\u00a9\u00bc",
    "\u00c6\u00d3\u00d5\u00e0\u00f2\u00fd\u010b\u010d\u0119\u011b\u0127\u0129",
    "\u013b\u013d\u0149\u014b\u0156\u0161\u016c\u0177\u0182\u018b\u0193\u019f",
    "\u01ab\u01b0\u01b5\u01bc\u01c6\u01ce\u01d6\u01da\u01e3\u01ee\u01f3\u01f9",
    "\u01fd\u01ff\u0209\u020e\u0212\u0216\u021e\u0227\u0231\u0239\u0250\u0253",
    "\u0262\u0268\u026d\u0278\u027b\u027d\u0283\u0287\u028b\u028e\u0293\u0297",
    "\u02a1\u02a9\u02b3\u02bb\u02bd\u02c7\u02cc\u02d0\u02d3\u02dc\u02df\u02e5",
    "\u02f5\u02f8\u02fd\u0300\u0307\u031a\u031d\u031f\u032e\u0332\u0339\u033e",
    "\u034b\u0354\u0364\u0367\u036f\u0372\u0376\u037b\u0388\u038c\u0397\u039c",
    "\u039f\u03aa\u03b2\u03c8\u03cd\u03d1\u03d4\u03d8\u03dc\u03de\u03e4\u03ee",
    "\u03fa\u0401\u0404\u040f\u0415\u0418\u041c\u0427"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'_Atomic'", "'__inline__'", "'_Alignas'", "'__asm'", 
                     "'__asm__'", "'__volatile__'", "'auto'", "'break'", 
                     "'case'", "'char'", "'const'", "'continue'", "'default'", 
                     "'do'", "'double'", "'else'", "'enum'", "'extern'", 
                     "'float'", "'for'", "'goto'", "'if'", "'inline'", "'int'", 
                     "'long'", "'register'", "'restrict'", "'return'", "'short'", 
                     "'signed'", "'sizeof'", "'static'", "'struct'", "'switch'", 
                     "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", 
                     "'while'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
                     "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'", "'+'", 
                     "'++'", "'-'", "'--'", "'*'", "'/'", "'%'", "'&'", 
                     "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", "'?'", 
                     "':'", "';'", "','", "'='", "'*='", "'/='", "'%='", 
                     "'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='", "'|='", 
                     "'=='", "'!='", "'->'", "'.'", "'...'" ];

var symbolicNames = [ null, null, null, null, null, null, null, "Auto", 
                      "Break", "Case", "Char", "Const", "Continue", "Default", 
                      "Do", "Double", "Else", "Enum", "Extern", "Float", 
                      "For", "Goto", "If", "Inline", "Int", "Long", "Register", 
                      "Restrict", "Return", "Short", "Signed", "Sizeof", 
                      "Static", "Struct", "Switch", "Typedef", "Union", 
                      "Unsigned", "Void", "Volatile", "While", "LeftParen", 
                      "RightParen", "LeftBracket", "RightBracket", "LeftBrace", 
                      "RightBrace", "Less", "LessEqual", "Greater", "GreaterEqual", 
                      "LeftShift", "RightShift", "Plus", "PlusPlus", "Minus", 
                      "MinusMinus", "Star", "Div", "Mod", "And", "Or", "AndAnd", 
                      "OrOr", "Caret", "Not", "Tilde", "Question", "Colon", 
                      "Semi", "Comma", "Assign", "StarAssign", "DivAssign", 
                      "ModAssign", "PlusAssign", "MinusAssign", "LeftShiftAssign", 
                      "RightShiftAssign", "AndAssign", "XorAssign", "OrAssign", 
                      "Equal", "NotEqual", "Arrow", "Dot", "Ellipsis", "Identifier", 
                      "Constant", "DigitSequence", "StringLiteral", "ComplexDefine", 
                      "IncludeDirective", "AsmBlock", "LineAfterPreprocessing", 
                      "LineDirective", "PragmaDirective", "Whitespace", 
                      "Newline", "BlockComment", "LineComment" ];

var ruleNames =  [ "primaryExpression", "postfixExpression", "argumentExpressionList", 
                   "unaryExpression", "unaryOperator", "castExpression", 
                   "multiplicativeExpression", "additiveExpression", "shiftExpression", 
                   "relationalExpression", "equalityExpression", "andExpression", 
                   "exclusiveOrExpression", "inclusiveOrExpression", "logicalAndExpression", 
                   "logicalOrExpression", "conditionalExpression", "assignmentExpression", 
                   "assignmentOperator", "expression", "constantExpression", 
                   "declaration", "declarationSpecifiers", "declarationSpecifiers2", 
                   "declarationSpecifier", "initDeclaratorList", "initDeclarator", 
                   "storageClassSpecifier", "typeSpecifier", "structOrUnionSpecifier", 
                   "structOrUnion", "structDeclarationList", "structDeclaration", 
                   "specifierQualifierList", "structDeclaratorList", "structDeclarator", 
                   "enumSpecifier", "enumeratorList", "enumerator", "enumerationConstant", 
                   "atomicTypeSpecifier", "typeQualifier", "functionSpecifier", 
                   "alignmentSpecifier", "declarator", "directDeclarator", 
                   "pointer", "typeQualifierList", "parameterTypeList", 
                   "parameterList", "parameterDeclaration", "identifierList", 
                   "typeName", "abstractDeclarator", "directAbstractDeclarator", 
                   "typedefName", "initializer", "initializerList", "designation", 
                   "designatorList", "designator", "statement", "labeledStatement", 
                   "compoundStatement", "blockItemList", "blockItem", "expressionStatement", 
                   "selectionStatement", "iterationStatement", "forCondition", 
                   "forDeclaration", "forExpression", "jumpStatement", "compilationUnit", 
                   "translationUnit", "externalDeclaration", "functionDefinition", 
                   "declarationList" ];

function CParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

CParser.prototype = Object.create(antlr4.Parser.prototype);
CParser.prototype.constructor = CParser;

Object.defineProperty(CParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

CParser.EOF = antlr4.Token.EOF;
CParser.T__0 = 1;
CParser.T__1 = 2;
CParser.T__2 = 3;
CParser.T__3 = 4;
CParser.T__4 = 5;
CParser.T__5 = 6;
CParser.Auto = 7;
CParser.Break = 8;
CParser.Case = 9;
CParser.Char = 10;
CParser.Const = 11;
CParser.Continue = 12;
CParser.Default = 13;
CParser.Do = 14;
CParser.Double = 15;
CParser.Else = 16;
CParser.Enum = 17;
CParser.Extern = 18;
CParser.Float = 19;
CParser.For = 20;
CParser.Goto = 21;
CParser.If = 22;
CParser.Inline = 23;
CParser.Int = 24;
CParser.Long = 25;
CParser.Register = 26;
CParser.Restrict = 27;
CParser.Return = 28;
CParser.Short = 29;
CParser.Signed = 30;
CParser.Sizeof = 31;
CParser.Static = 32;
CParser.Struct = 33;
CParser.Switch = 34;
CParser.Typedef = 35;
CParser.Union = 36;
CParser.Unsigned = 37;
CParser.Void = 38;
CParser.Volatile = 39;
CParser.While = 40;
CParser.LeftParen = 41;
CParser.RightParen = 42;
CParser.LeftBracket = 43;
CParser.RightBracket = 44;
CParser.LeftBrace = 45;
CParser.RightBrace = 46;
CParser.Less = 47;
CParser.LessEqual = 48;
CParser.Greater = 49;
CParser.GreaterEqual = 50;
CParser.LeftShift = 51;
CParser.RightShift = 52;
CParser.Plus = 53;
CParser.PlusPlus = 54;
CParser.Minus = 55;
CParser.MinusMinus = 56;
CParser.Star = 57;
CParser.Div = 58;
CParser.Mod = 59;
CParser.And = 60;
CParser.Or = 61;
CParser.AndAnd = 62;
CParser.OrOr = 63;
CParser.Caret = 64;
CParser.Not = 65;
CParser.Tilde = 66;
CParser.Question = 67;
CParser.Colon = 68;
CParser.Semi = 69;
CParser.Comma = 70;
CParser.Assign = 71;
CParser.StarAssign = 72;
CParser.DivAssign = 73;
CParser.ModAssign = 74;
CParser.PlusAssign = 75;
CParser.MinusAssign = 76;
CParser.LeftShiftAssign = 77;
CParser.RightShiftAssign = 78;
CParser.AndAssign = 79;
CParser.XorAssign = 80;
CParser.OrAssign = 81;
CParser.Equal = 82;
CParser.NotEqual = 83;
CParser.Arrow = 84;
CParser.Dot = 85;
CParser.Ellipsis = 86;
CParser.Identifier = 87;
CParser.Constant = 88;
CParser.DigitSequence = 89;
CParser.StringLiteral = 90;
CParser.ComplexDefine = 91;
CParser.IncludeDirective = 92;
CParser.AsmBlock = 93;
CParser.LineAfterPreprocessing = 94;
CParser.LineDirective = 95;
CParser.PragmaDirective = 96;
CParser.Whitespace = 97;
CParser.Newline = 98;
CParser.BlockComment = 99;
CParser.LineComment = 100;

CParser.RULE_primaryExpression = 0;
CParser.RULE_postfixExpression = 1;
CParser.RULE_argumentExpressionList = 2;
CParser.RULE_unaryExpression = 3;
CParser.RULE_unaryOperator = 4;
CParser.RULE_castExpression = 5;
CParser.RULE_multiplicativeExpression = 6;
CParser.RULE_additiveExpression = 7;
CParser.RULE_shiftExpression = 8;
CParser.RULE_relationalExpression = 9;
CParser.RULE_equalityExpression = 10;
CParser.RULE_andExpression = 11;
CParser.RULE_exclusiveOrExpression = 12;
CParser.RULE_inclusiveOrExpression = 13;
CParser.RULE_logicalAndExpression = 14;
CParser.RULE_logicalOrExpression = 15;
CParser.RULE_conditionalExpression = 16;
CParser.RULE_assignmentExpression = 17;
CParser.RULE_assignmentOperator = 18;
CParser.RULE_expression = 19;
CParser.RULE_constantExpression = 20;
CParser.RULE_declaration = 21;
CParser.RULE_declarationSpecifiers = 22;
CParser.RULE_declarationSpecifiers2 = 23;
CParser.RULE_declarationSpecifier = 24;
CParser.RULE_initDeclaratorList = 25;
CParser.RULE_initDeclarator = 26;
CParser.RULE_storageClassSpecifier = 27;
CParser.RULE_typeSpecifier = 28;
CParser.RULE_structOrUnionSpecifier = 29;
CParser.RULE_structOrUnion = 30;
CParser.RULE_structDeclarationList = 31;
CParser.RULE_structDeclaration = 32;
CParser.RULE_specifierQualifierList = 33;
CParser.RULE_structDeclaratorList = 34;
CParser.RULE_structDeclarator = 35;
CParser.RULE_enumSpecifier = 36;
CParser.RULE_enumeratorList = 37;
CParser.RULE_enumerator = 38;
CParser.RULE_enumerationConstant = 39;
CParser.RULE_atomicTypeSpecifier = 40;
CParser.RULE_typeQualifier = 41;
CParser.RULE_functionSpecifier = 42;
CParser.RULE_alignmentSpecifier = 43;
CParser.RULE_declarator = 44;
CParser.RULE_directDeclarator = 45;
CParser.RULE_pointer = 46;
CParser.RULE_typeQualifierList = 47;
CParser.RULE_parameterTypeList = 48;
CParser.RULE_parameterList = 49;
CParser.RULE_parameterDeclaration = 50;
CParser.RULE_identifierList = 51;
CParser.RULE_typeName = 52;
CParser.RULE_abstractDeclarator = 53;
CParser.RULE_directAbstractDeclarator = 54;
CParser.RULE_typedefName = 55;
CParser.RULE_initializer = 56;
CParser.RULE_initializerList = 57;
CParser.RULE_designation = 58;
CParser.RULE_designatorList = 59;
CParser.RULE_designator = 60;
CParser.RULE_statement = 61;
CParser.RULE_labeledStatement = 62;
CParser.RULE_compoundStatement = 63;
CParser.RULE_blockItemList = 64;
CParser.RULE_blockItem = 65;
CParser.RULE_expressionStatement = 66;
CParser.RULE_selectionStatement = 67;
CParser.RULE_iterationStatement = 68;
CParser.RULE_forCondition = 69;
CParser.RULE_forDeclaration = 70;
CParser.RULE_forExpression = 71;
CParser.RULE_jumpStatement = 72;
CParser.RULE_compilationUnit = 73;
CParser.RULE_translationUnit = 74;
CParser.RULE_externalDeclaration = 75;
CParser.RULE_functionDefinition = 76;
CParser.RULE_declarationList = 77;

function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;

PrimaryExpressionContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

PrimaryExpressionContext.prototype.Constant = function() {
    return this.getToken(CParser.Constant, 0);
};

PrimaryExpressionContext.prototype.StringLiteral = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(CParser.StringLiteral);
    } else {
        return this.getToken(CParser.StringLiteral, i);
    }
};


PrimaryExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitPrimaryExpression(this);
	}
};




CParser.PrimaryExpressionContext = PrimaryExpressionContext;

CParser.prototype.primaryExpression = function() {

    var localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CParser.RULE_primaryExpression);
    try {
        this.state = 167;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 156;
            this.match(CParser.Identifier);
            break;
        case CParser.Constant:
            this.enterOuterAlt(localctx, 2);
            this.state = 157;
            this.match(CParser.Constant);
            break;
        case CParser.StringLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 159; 
            this._errHandler.sync(this);
            var _alt = 1;
            do {
            	switch (_alt) {
            	case 1:
            		this.state = 158;
            		this.match(CParser.StringLiteral);
            		break;
            	default:
            		throw new antlr4.error.NoViableAltException(this);
            	}
            	this.state = 161; 
            	this._errHandler.sync(this);
            	_alt = this._interp.adaptivePredict(this._input,0, this._ctx);
            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
            break;
        case CParser.LeftParen:
            this.enterOuterAlt(localctx, 4);
            this.state = 163;
            this.match(CParser.LeftParen);
            this.state = 164;
            this.expression(0);
            this.state = 165;
            this.match(CParser.RightParen);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PostfixExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_postfixExpression;
    return this;
}

PostfixExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PostfixExpressionContext.prototype.constructor = PostfixExpressionContext;

PostfixExpressionContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

PostfixExpressionContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

PostfixExpressionContext.prototype.initializerList = function() {
    return this.getTypedRuleContext(InitializerListContext,0);
};

PostfixExpressionContext.prototype.postfixExpression = function() {
    return this.getTypedRuleContext(PostfixExpressionContext,0);
};

PostfixExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PostfixExpressionContext.prototype.argumentExpressionList = function() {
    return this.getTypedRuleContext(ArgumentExpressionListContext,0);
};

PostfixExpressionContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

PostfixExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterPostfixExpression(this);
	}
};

PostfixExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitPostfixExpression(this);
	}
};



CParser.prototype.postfixExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PostfixExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 2;
    this.enterRecursionRule(localctx, 2, CParser.RULE_postfixExpression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 186;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.state = 170;
            this.primaryExpression();
            break;

        case 2:
            this.state = 171;
            this.match(CParser.LeftParen);
            this.state = 172;
            this.typeName();
            this.state = 173;
            this.match(CParser.RightParen);
            this.state = 174;
            this.match(CParser.LeftBrace);
            this.state = 175;
            this.initializerList(0);
            this.state = 176;
            this.match(CParser.RightBrace);
            break;

        case 3:
            this.state = 178;
            this.match(CParser.LeftParen);
            this.state = 179;
            this.typeName();
            this.state = 180;
            this.match(CParser.RightParen);
            this.state = 181;
            this.match(CParser.LeftBrace);
            this.state = 182;
            this.initializerList(0);
            this.state = 183;
            this.match(CParser.Comma);
            this.state = 184;
            this.match(CParser.RightBrace);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 211;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 209;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_postfixExpression);
                    this.state = 188;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 189;
                    this.match(CParser.LeftBracket);
                    this.state = 190;
                    this.expression(0);
                    this.state = 191;
                    this.match(CParser.RightBracket);
                    break;

                case 2:
                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_postfixExpression);
                    this.state = 193;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 194;
                    this.match(CParser.LeftParen);
                    this.state = 196;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (CParser.Sizeof - 31)) | (1 << (CParser.LeftParen - 31)) | (1 << (CParser.Plus - 31)) | (1 << (CParser.PlusPlus - 31)) | (1 << (CParser.Minus - 31)) | (1 << (CParser.MinusMinus - 31)) | (1 << (CParser.Star - 31)) | (1 << (CParser.And - 31)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) !== 0)) {
                        this.state = 195;
                        this.argumentExpressionList(0);
                    }

                    this.state = 198;
                    this.match(CParser.RightParen);
                    break;

                case 3:
                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_postfixExpression);
                    this.state = 199;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 200;
                    this.match(CParser.Dot);
                    this.state = 201;
                    this.match(CParser.Identifier);
                    break;

                case 4:
                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_postfixExpression);
                    this.state = 202;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 203;
                    this.match(CParser.Arrow);
                    this.state = 204;
                    this.match(CParser.Identifier);
                    break;

                case 5:
                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_postfixExpression);
                    this.state = 205;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 206;
                    this.match(CParser.PlusPlus);
                    break;

                case 6:
                    localctx = new PostfixExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_postfixExpression);
                    this.state = 207;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 208;
                    this.match(CParser.MinusMinus);
                    break;

                } 
            }
            this.state = 213;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ArgumentExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_argumentExpressionList;
    return this;
}

ArgumentExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentExpressionListContext.prototype.constructor = ArgumentExpressionListContext;

ArgumentExpressionListContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

ArgumentExpressionListContext.prototype.argumentExpressionList = function() {
    return this.getTypedRuleContext(ArgumentExpressionListContext,0);
};

ArgumentExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterArgumentExpressionList(this);
	}
};

ArgumentExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitArgumentExpressionList(this);
	}
};



CParser.prototype.argumentExpressionList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ArgumentExpressionListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 4;
    this.enterRecursionRule(localctx, 4, CParser.RULE_argumentExpressionList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 215;
        this.assignmentExpression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 222;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,6,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ArgumentExpressionListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_argumentExpressionList);
                this.state = 217;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 218;
                this.match(CParser.Comma);
                this.state = 219;
                this.assignmentExpression(); 
            }
            this.state = 224;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,6,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function UnaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_unaryExpression;
    return this;
}

UnaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryExpressionContext.prototype.constructor = UnaryExpressionContext;

UnaryExpressionContext.prototype.postfixExpression = function() {
    return this.getTypedRuleContext(PostfixExpressionContext,0);
};

UnaryExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

UnaryExpressionContext.prototype.unaryOperator = function() {
    return this.getTypedRuleContext(UnaryOperatorContext,0);
};

UnaryExpressionContext.prototype.castExpression = function() {
    return this.getTypedRuleContext(CastExpressionContext,0);
};

UnaryExpressionContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

UnaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterUnaryExpression(this);
	}
};

UnaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitUnaryExpression(this);
	}
};




CParser.UnaryExpressionContext = UnaryExpressionContext;

CParser.prototype.unaryExpression = function() {

    var localctx = new UnaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CParser.RULE_unaryExpression);
    try {
        this.state = 240;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 225;
            this.postfixExpression(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 226;
            this.match(CParser.PlusPlus);
            this.state = 227;
            this.unaryExpression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 228;
            this.match(CParser.MinusMinus);
            this.state = 229;
            this.unaryExpression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 230;
            this.unaryOperator();
            this.state = 231;
            this.castExpression();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 233;
            this.match(CParser.Sizeof);
            this.state = 234;
            this.unaryExpression();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 235;
            this.match(CParser.Sizeof);
            this.state = 236;
            this.match(CParser.LeftParen);
            this.state = 237;
            this.typeName();
            this.state = 238;
            this.match(CParser.RightParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnaryOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_unaryOperator;
    return this;
}

UnaryOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryOperatorContext.prototype.constructor = UnaryOperatorContext;


UnaryOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterUnaryOperator(this);
	}
};

UnaryOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitUnaryOperator(this);
	}
};




CParser.UnaryOperatorContext = UnaryOperatorContext;

CParser.prototype.unaryOperator = function() {

    var localctx = new UnaryOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, CParser.RULE_unaryOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 242;
        _la = this._input.LA(1);
        if(!(((((_la - 53)) & ~0x1f) == 0 && ((1 << (_la - 53)) & ((1 << (CParser.Plus - 53)) | (1 << (CParser.Minus - 53)) | (1 << (CParser.Star - 53)) | (1 << (CParser.And - 53)) | (1 << (CParser.Not - 53)) | (1 << (CParser.Tilde - 53)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CastExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_castExpression;
    return this;
}

CastExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CastExpressionContext.prototype.constructor = CastExpressionContext;

CastExpressionContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

CastExpressionContext.prototype.castExpression = function() {
    return this.getTypedRuleContext(CastExpressionContext,0);
};

CastExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

CastExpressionContext.prototype.DigitSequence = function() {
    return this.getToken(CParser.DigitSequence, 0);
};

CastExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterCastExpression(this);
	}
};

CastExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitCastExpression(this);
	}
};




CParser.CastExpressionContext = CastExpressionContext;

CParser.prototype.castExpression = function() {

    var localctx = new CastExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, CParser.RULE_castExpression);
    try {
        this.state = 251;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 244;
            this.match(CParser.LeftParen);
            this.state = 245;
            this.typeName();
            this.state = 246;
            this.match(CParser.RightParen);
            this.state = 247;
            this.castExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 249;
            this.unaryExpression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 250;
            this.match(CParser.DigitSequence);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MultiplicativeExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_multiplicativeExpression;
    return this;
}

MultiplicativeExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MultiplicativeExpressionContext.prototype.constructor = MultiplicativeExpressionContext;

MultiplicativeExpressionContext.prototype.castExpression = function() {
    return this.getTypedRuleContext(CastExpressionContext,0);
};

MultiplicativeExpressionContext.prototype.multiplicativeExpression = function() {
    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
};

MultiplicativeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterMultiplicativeExpression(this);
	}
};

MultiplicativeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitMultiplicativeExpression(this);
	}
};



CParser.prototype.multiplicativeExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new MultiplicativeExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 12;
    this.enterRecursionRule(localctx, 12, CParser.RULE_multiplicativeExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 254;
        this.castExpression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 267;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 265;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_multiplicativeExpression);
                    this.state = 256;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 257;
                    this.match(CParser.Star);
                    this.state = 258;
                    this.castExpression();
                    break;

                case 2:
                    localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_multiplicativeExpression);
                    this.state = 259;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 260;
                    this.match(CParser.Div);
                    this.state = 261;
                    this.castExpression();
                    break;

                case 3:
                    localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_multiplicativeExpression);
                    this.state = 262;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 263;
                    this.match(CParser.Mod);
                    this.state = 264;
                    this.castExpression();
                    break;

                } 
            }
            this.state = 269;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AdditiveExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_additiveExpression;
    return this;
}

AdditiveExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AdditiveExpressionContext.prototype.constructor = AdditiveExpressionContext;

AdditiveExpressionContext.prototype.multiplicativeExpression = function() {
    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
};

AdditiveExpressionContext.prototype.additiveExpression = function() {
    return this.getTypedRuleContext(AdditiveExpressionContext,0);
};

AdditiveExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterAdditiveExpression(this);
	}
};

AdditiveExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitAdditiveExpression(this);
	}
};



CParser.prototype.additiveExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AdditiveExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 14;
    this.enterRecursionRule(localctx, 14, CParser.RULE_additiveExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 271;
        this.multiplicativeExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 281;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 279;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new AdditiveExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_additiveExpression);
                    this.state = 273;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 274;
                    this.match(CParser.Plus);
                    this.state = 275;
                    this.multiplicativeExpression(0);
                    break;

                case 2:
                    localctx = new AdditiveExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_additiveExpression);
                    this.state = 276;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 277;
                    this.match(CParser.Minus);
                    this.state = 278;
                    this.multiplicativeExpression(0);
                    break;

                } 
            }
            this.state = 283;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ShiftExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_shiftExpression;
    return this;
}

ShiftExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShiftExpressionContext.prototype.constructor = ShiftExpressionContext;

ShiftExpressionContext.prototype.additiveExpression = function() {
    return this.getTypedRuleContext(AdditiveExpressionContext,0);
};

ShiftExpressionContext.prototype.shiftExpression = function() {
    return this.getTypedRuleContext(ShiftExpressionContext,0);
};

ShiftExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterShiftExpression(this);
	}
};

ShiftExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitShiftExpression(this);
	}
};



CParser.prototype.shiftExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ShiftExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 16;
    this.enterRecursionRule(localctx, 16, CParser.RULE_shiftExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 285;
        this.additiveExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 295;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 293;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ShiftExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_shiftExpression);
                    this.state = 287;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 288;
                    this.match(CParser.LeftShift);
                    this.state = 289;
                    this.additiveExpression(0);
                    break;

                case 2:
                    localctx = new ShiftExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_shiftExpression);
                    this.state = 290;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 291;
                    this.match(CParser.RightShift);
                    this.state = 292;
                    this.additiveExpression(0);
                    break;

                } 
            }
            this.state = 297;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function RelationalExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_relationalExpression;
    return this;
}

RelationalExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RelationalExpressionContext.prototype.constructor = RelationalExpressionContext;

RelationalExpressionContext.prototype.shiftExpression = function() {
    return this.getTypedRuleContext(ShiftExpressionContext,0);
};

RelationalExpressionContext.prototype.relationalExpression = function() {
    return this.getTypedRuleContext(RelationalExpressionContext,0);
};

RelationalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterRelationalExpression(this);
	}
};

RelationalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitRelationalExpression(this);
	}
};



CParser.prototype.relationalExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new RelationalExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 18;
    this.enterRecursionRule(localctx, 18, CParser.RULE_relationalExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 299;
        this.shiftExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 315;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,16,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 313;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_relationalExpression);
                    this.state = 301;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 302;
                    this.match(CParser.Less);
                    this.state = 303;
                    this.shiftExpression(0);
                    break;

                case 2:
                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_relationalExpression);
                    this.state = 304;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 305;
                    this.match(CParser.Greater);
                    this.state = 306;
                    this.shiftExpression(0);
                    break;

                case 3:
                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_relationalExpression);
                    this.state = 307;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 308;
                    this.match(CParser.LessEqual);
                    this.state = 309;
                    this.shiftExpression(0);
                    break;

                case 4:
                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_relationalExpression);
                    this.state = 310;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 311;
                    this.match(CParser.GreaterEqual);
                    this.state = 312;
                    this.shiftExpression(0);
                    break;

                } 
            }
            this.state = 317;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,16,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function EqualityExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_equalityExpression;
    return this;
}

EqualityExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EqualityExpressionContext.prototype.constructor = EqualityExpressionContext;

EqualityExpressionContext.prototype.relationalExpression = function() {
    return this.getTypedRuleContext(RelationalExpressionContext,0);
};

EqualityExpressionContext.prototype.equalityExpression = function() {
    return this.getTypedRuleContext(EqualityExpressionContext,0);
};

EqualityExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterEqualityExpression(this);
	}
};

EqualityExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitEqualityExpression(this);
	}
};



CParser.prototype.equalityExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new EqualityExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 20;
    this.enterRecursionRule(localctx, 20, CParser.RULE_equalityExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 319;
        this.relationalExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 329;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,18,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 327;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new EqualityExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_equalityExpression);
                    this.state = 321;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 322;
                    this.match(CParser.Equal);
                    this.state = 323;
                    this.relationalExpression(0);
                    break;

                case 2:
                    localctx = new EqualityExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_equalityExpression);
                    this.state = 324;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 325;
                    this.match(CParser.NotEqual);
                    this.state = 326;
                    this.relationalExpression(0);
                    break;

                } 
            }
            this.state = 331;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,18,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function AndExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_andExpression;
    return this;
}

AndExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AndExpressionContext.prototype.constructor = AndExpressionContext;

AndExpressionContext.prototype.equalityExpression = function() {
    return this.getTypedRuleContext(EqualityExpressionContext,0);
};

AndExpressionContext.prototype.andExpression = function() {
    return this.getTypedRuleContext(AndExpressionContext,0);
};

AndExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterAndExpression(this);
	}
};

AndExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitAndExpression(this);
	}
};



CParser.prototype.andExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new AndExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 22;
    this.enterRecursionRule(localctx, 22, CParser.RULE_andExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 333;
        this.equalityExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 340;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,19,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new AndExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_andExpression);
                this.state = 335;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 336;
                this.match(CParser.And);
                this.state = 337;
                this.equalityExpression(0); 
            }
            this.state = 342;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,19,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ExclusiveOrExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_exclusiveOrExpression;
    return this;
}

ExclusiveOrExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExclusiveOrExpressionContext.prototype.constructor = ExclusiveOrExpressionContext;

ExclusiveOrExpressionContext.prototype.andExpression = function() {
    return this.getTypedRuleContext(AndExpressionContext,0);
};

ExclusiveOrExpressionContext.prototype.exclusiveOrExpression = function() {
    return this.getTypedRuleContext(ExclusiveOrExpressionContext,0);
};

ExclusiveOrExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterExclusiveOrExpression(this);
	}
};

ExclusiveOrExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitExclusiveOrExpression(this);
	}
};



CParser.prototype.exclusiveOrExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExclusiveOrExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 24;
    this.enterRecursionRule(localctx, 24, CParser.RULE_exclusiveOrExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 344;
        this.andExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 351;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,20,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ExclusiveOrExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_exclusiveOrExpression);
                this.state = 346;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 347;
                this.match(CParser.Caret);
                this.state = 348;
                this.andExpression(0); 
            }
            this.state = 353;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,20,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function InclusiveOrExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_inclusiveOrExpression;
    return this;
}

InclusiveOrExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InclusiveOrExpressionContext.prototype.constructor = InclusiveOrExpressionContext;

InclusiveOrExpressionContext.prototype.exclusiveOrExpression = function() {
    return this.getTypedRuleContext(ExclusiveOrExpressionContext,0);
};

InclusiveOrExpressionContext.prototype.inclusiveOrExpression = function() {
    return this.getTypedRuleContext(InclusiveOrExpressionContext,0);
};

InclusiveOrExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterInclusiveOrExpression(this);
	}
};

InclusiveOrExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitInclusiveOrExpression(this);
	}
};



CParser.prototype.inclusiveOrExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new InclusiveOrExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 26;
    this.enterRecursionRule(localctx, 26, CParser.RULE_inclusiveOrExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 355;
        this.exclusiveOrExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 362;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new InclusiveOrExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_inclusiveOrExpression);
                this.state = 357;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 358;
                this.match(CParser.Or);
                this.state = 359;
                this.exclusiveOrExpression(0); 
            }
            this.state = 364;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function LogicalAndExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_logicalAndExpression;
    return this;
}

LogicalAndExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogicalAndExpressionContext.prototype.constructor = LogicalAndExpressionContext;

LogicalAndExpressionContext.prototype.inclusiveOrExpression = function() {
    return this.getTypedRuleContext(InclusiveOrExpressionContext,0);
};

LogicalAndExpressionContext.prototype.logicalAndExpression = function() {
    return this.getTypedRuleContext(LogicalAndExpressionContext,0);
};

LogicalAndExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterLogicalAndExpression(this);
	}
};

LogicalAndExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitLogicalAndExpression(this);
	}
};



CParser.prototype.logicalAndExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new LogicalAndExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 28;
    this.enterRecursionRule(localctx, 28, CParser.RULE_logicalAndExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 366;
        this.inclusiveOrExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 373;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,22,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new LogicalAndExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_logicalAndExpression);
                this.state = 368;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 369;
                this.match(CParser.AndAnd);
                this.state = 370;
                this.inclusiveOrExpression(0); 
            }
            this.state = 375;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,22,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function LogicalOrExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_logicalOrExpression;
    return this;
}

LogicalOrExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LogicalOrExpressionContext.prototype.constructor = LogicalOrExpressionContext;

LogicalOrExpressionContext.prototype.logicalAndExpression = function() {
    return this.getTypedRuleContext(LogicalAndExpressionContext,0);
};

LogicalOrExpressionContext.prototype.logicalOrExpression = function() {
    return this.getTypedRuleContext(LogicalOrExpressionContext,0);
};

LogicalOrExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterLogicalOrExpression(this);
	}
};

LogicalOrExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitLogicalOrExpression(this);
	}
};



CParser.prototype.logicalOrExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new LogicalOrExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 30;
    this.enterRecursionRule(localctx, 30, CParser.RULE_logicalOrExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 377;
        this.logicalAndExpression(0);
        this._ctx.stop = this._input.LT(-1);
        this.state = 384;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,23,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new LogicalOrExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_logicalOrExpression);
                this.state = 379;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 380;
                this.match(CParser.OrOr);
                this.state = 381;
                this.logicalAndExpression(0); 
            }
            this.state = 386;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,23,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ConditionalExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_conditionalExpression;
    return this;
}

ConditionalExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalExpressionContext.prototype.constructor = ConditionalExpressionContext;

ConditionalExpressionContext.prototype.logicalOrExpression = function() {
    return this.getTypedRuleContext(LogicalOrExpressionContext,0);
};

ConditionalExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConditionalExpressionContext.prototype.conditionalExpression = function() {
    return this.getTypedRuleContext(ConditionalExpressionContext,0);
};

ConditionalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterConditionalExpression(this);
	}
};

ConditionalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitConditionalExpression(this);
	}
};




CParser.ConditionalExpressionContext = ConditionalExpressionContext;

CParser.prototype.conditionalExpression = function() {

    var localctx = new ConditionalExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, CParser.RULE_conditionalExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 387;
        this.logicalOrExpression(0);
        this.state = 393;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
        if(la_===1) {
            this.state = 388;
            this.match(CParser.Question);
            this.state = 389;
            this.expression(0);
            this.state = 390;
            this.match(CParser.Colon);
            this.state = 391;
            this.conditionalExpression();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_assignmentExpression;
    return this;
}

AssignmentExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentExpressionContext.prototype.constructor = AssignmentExpressionContext;

AssignmentExpressionContext.prototype.conditionalExpression = function() {
    return this.getTypedRuleContext(ConditionalExpressionContext,0);
};

AssignmentExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

AssignmentExpressionContext.prototype.assignmentOperator = function() {
    return this.getTypedRuleContext(AssignmentOperatorContext,0);
};

AssignmentExpressionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

AssignmentExpressionContext.prototype.DigitSequence = function() {
    return this.getToken(CParser.DigitSequence, 0);
};

AssignmentExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterAssignmentExpression(this);
	}
};

AssignmentExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitAssignmentExpression(this);
	}
};




CParser.AssignmentExpressionContext = AssignmentExpressionContext;

CParser.prototype.assignmentExpression = function() {

    var localctx = new AssignmentExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, CParser.RULE_assignmentExpression);
    try {
        this.state = 401;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 395;
            this.conditionalExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 396;
            this.unaryExpression();
            this.state = 397;
            this.assignmentOperator();
            this.state = 398;
            this.assignmentExpression();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 400;
            this.match(CParser.DigitSequence);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssignmentOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_assignmentOperator;
    return this;
}

AssignmentOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentOperatorContext.prototype.constructor = AssignmentOperatorContext;


AssignmentOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterAssignmentOperator(this);
	}
};

AssignmentOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitAssignmentOperator(this);
	}
};




CParser.AssignmentOperatorContext = AssignmentOperatorContext;

CParser.prototype.assignmentOperator = function() {

    var localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, CParser.RULE_assignmentOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 403;
        _la = this._input.LA(1);
        if(!(((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (CParser.Assign - 71)) | (1 << (CParser.StarAssign - 71)) | (1 << (CParser.DivAssign - 71)) | (1 << (CParser.ModAssign - 71)) | (1 << (CParser.PlusAssign - 71)) | (1 << (CParser.MinusAssign - 71)) | (1 << (CParser.LeftShiftAssign - 71)) | (1 << (CParser.RightShiftAssign - 71)) | (1 << (CParser.AndAssign - 71)) | (1 << (CParser.XorAssign - 71)) | (1 << (CParser.OrAssign - 71)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

ExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitExpression(this);
	}
};



CParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 38;
    this.enterRecursionRule(localctx, 38, CParser.RULE_expression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 406;
        this.assignmentExpression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 413;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,26,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_expression);
                this.state = 408;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 409;
                this.match(CParser.Comma);
                this.state = 410;
                this.assignmentExpression(); 
            }
            this.state = 415;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,26,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ConstantExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_constantExpression;
    return this;
}

ConstantExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstantExpressionContext.prototype.constructor = ConstantExpressionContext;

ConstantExpressionContext.prototype.conditionalExpression = function() {
    return this.getTypedRuleContext(ConditionalExpressionContext,0);
};

ConstantExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterConstantExpression(this);
	}
};

ConstantExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitConstantExpression(this);
	}
};




CParser.ConstantExpressionContext = ConstantExpressionContext;

CParser.prototype.constantExpression = function() {

    var localctx = new ConstantExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CParser.RULE_constantExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 416;
        this.conditionalExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_declaration;
    return this;
}

DeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationContext.prototype.constructor = DeclarationContext;

DeclarationContext.prototype.declarationSpecifiers = function() {
    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
};

DeclarationContext.prototype.initDeclaratorList = function() {
    return this.getTypedRuleContext(InitDeclaratorListContext,0);
};

DeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterDeclaration(this);
	}
};

DeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitDeclaration(this);
	}
};




CParser.DeclarationContext = DeclarationContext;

CParser.prototype.declaration = function() {

    var localctx = new DeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, CParser.RULE_declaration);
    try {
        this.state = 425;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 418;
            this.declarationSpecifiers();
            this.state = 419;
            this.initDeclaratorList(0);
            this.state = 420;
            this.match(CParser.Semi);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 422;
            this.declarationSpecifiers();
            this.state = 423;
            this.match(CParser.Semi);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationSpecifiersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_declarationSpecifiers;
    return this;
}

DeclarationSpecifiersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationSpecifiersContext.prototype.constructor = DeclarationSpecifiersContext;

DeclarationSpecifiersContext.prototype.declarationSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationSpecifierContext);
    } else {
        return this.getTypedRuleContext(DeclarationSpecifierContext,i);
    }
};

DeclarationSpecifiersContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterDeclarationSpecifiers(this);
	}
};

DeclarationSpecifiersContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitDeclarationSpecifiers(this);
	}
};




CParser.DeclarationSpecifiersContext = DeclarationSpecifiersContext;

CParser.prototype.declarationSpecifiers = function() {

    var localctx = new DeclarationSpecifiersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, CParser.RULE_declarationSpecifiers);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 428; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 427;
        		this.declarationSpecifier();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 430; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,28, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationSpecifiers2Context(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_declarationSpecifiers2;
    return this;
}

DeclarationSpecifiers2Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationSpecifiers2Context.prototype.constructor = DeclarationSpecifiers2Context;

DeclarationSpecifiers2Context.prototype.declarationSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DeclarationSpecifierContext);
    } else {
        return this.getTypedRuleContext(DeclarationSpecifierContext,i);
    }
};

DeclarationSpecifiers2Context.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterDeclarationSpecifiers2(this);
	}
};

DeclarationSpecifiers2Context.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitDeclarationSpecifiers2(this);
	}
};




CParser.DeclarationSpecifiers2Context = DeclarationSpecifiers2Context;

CParser.prototype.declarationSpecifiers2 = function() {

    var localctx = new DeclarationSpecifiers2Context(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CParser.RULE_declarationSpecifiers2);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 433; 
        this._errHandler.sync(this);
        var _alt = 1;
        do {
        	switch (_alt) {
        	case 1:
        		this.state = 432;
        		this.declarationSpecifier();
        		break;
        	default:
        		throw new antlr4.error.NoViableAltException(this);
        	}
        	this.state = 435; 
        	this._errHandler.sync(this);
        	_alt = this._interp.adaptivePredict(this._input,29, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_declarationSpecifier;
    return this;
}

DeclarationSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationSpecifierContext.prototype.constructor = DeclarationSpecifierContext;

DeclarationSpecifierContext.prototype.storageClassSpecifier = function() {
    return this.getTypedRuleContext(StorageClassSpecifierContext,0);
};

DeclarationSpecifierContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};

DeclarationSpecifierContext.prototype.typeQualifier = function() {
    return this.getTypedRuleContext(TypeQualifierContext,0);
};

DeclarationSpecifierContext.prototype.functionSpecifier = function() {
    return this.getTypedRuleContext(FunctionSpecifierContext,0);
};

DeclarationSpecifierContext.prototype.alignmentSpecifier = function() {
    return this.getTypedRuleContext(AlignmentSpecifierContext,0);
};

DeclarationSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterDeclarationSpecifier(this);
	}
};

DeclarationSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitDeclarationSpecifier(this);
	}
};




CParser.DeclarationSpecifierContext = DeclarationSpecifierContext;

CParser.prototype.declarationSpecifier = function() {

    var localctx = new DeclarationSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CParser.RULE_declarationSpecifier);
    try {
        this.state = 442;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CParser.Auto:
        case CParser.Extern:
        case CParser.Register:
        case CParser.Static:
        case CParser.Typedef:
            this.enterOuterAlt(localctx, 1);
            this.state = 437;
            this.storageClassSpecifier();
            break;
        case CParser.Char:
        case CParser.Double:
        case CParser.Enum:
        case CParser.Float:
        case CParser.Int:
        case CParser.Long:
        case CParser.Short:
        case CParser.Signed:
        case CParser.Struct:
        case CParser.Union:
        case CParser.Unsigned:
        case CParser.Void:
        case CParser.Identifier:
            this.enterOuterAlt(localctx, 2);
            this.state = 438;
            this.typeSpecifier();
            break;
        case CParser.T__0:
        case CParser.Const:
        case CParser.Restrict:
        case CParser.Volatile:
            this.enterOuterAlt(localctx, 3);
            this.state = 439;
            this.typeQualifier();
            break;
        case CParser.T__1:
        case CParser.Inline:
            this.enterOuterAlt(localctx, 4);
            this.state = 440;
            this.functionSpecifier();
            break;
        case CParser.T__2:
            this.enterOuterAlt(localctx, 5);
            this.state = 441;
            this.alignmentSpecifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitDeclaratorListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_initDeclaratorList;
    return this;
}

InitDeclaratorListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitDeclaratorListContext.prototype.constructor = InitDeclaratorListContext;

InitDeclaratorListContext.prototype.initDeclarator = function() {
    return this.getTypedRuleContext(InitDeclaratorContext,0);
};

InitDeclaratorListContext.prototype.initDeclaratorList = function() {
    return this.getTypedRuleContext(InitDeclaratorListContext,0);
};

InitDeclaratorListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterInitDeclaratorList(this);
	}
};

InitDeclaratorListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitInitDeclaratorList(this);
	}
};



CParser.prototype.initDeclaratorList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new InitDeclaratorListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 50;
    this.enterRecursionRule(localctx, 50, CParser.RULE_initDeclaratorList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 445;
        this.initDeclarator();
        this._ctx.stop = this._input.LT(-1);
        this.state = 452;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,31,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new InitDeclaratorListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_initDeclaratorList);
                this.state = 447;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 448;
                this.match(CParser.Comma);
                this.state = 449;
                this.initDeclarator(); 
            }
            this.state = 454;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,31,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function InitDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_initDeclarator;
    return this;
}

InitDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitDeclaratorContext.prototype.constructor = InitDeclaratorContext;

InitDeclaratorContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

InitDeclaratorContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

InitDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterInitDeclarator(this);
	}
};

InitDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitInitDeclarator(this);
	}
};




CParser.InitDeclaratorContext = InitDeclaratorContext;

CParser.prototype.initDeclarator = function() {

    var localctx = new InitDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, CParser.RULE_initDeclarator);
    try {
        this.state = 460;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 455;
            this.declarator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 456;
            this.declarator();
            this.state = 457;
            this.match(CParser.Assign);
            this.state = 458;
            this.initializer();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StorageClassSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_storageClassSpecifier;
    return this;
}

StorageClassSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StorageClassSpecifierContext.prototype.constructor = StorageClassSpecifierContext;


StorageClassSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterStorageClassSpecifier(this);
	}
};

StorageClassSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitStorageClassSpecifier(this);
	}
};




CParser.StorageClassSpecifierContext = StorageClassSpecifierContext;

CParser.prototype.storageClassSpecifier = function() {

    var localctx = new StorageClassSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CParser.RULE_storageClassSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 462;
        _la = this._input.LA(1);
        if(!(((((_la - 7)) & ~0x1f) == 0 && ((1 << (_la - 7)) & ((1 << (CParser.Auto - 7)) | (1 << (CParser.Extern - 7)) | (1 << (CParser.Register - 7)) | (1 << (CParser.Static - 7)) | (1 << (CParser.Typedef - 7)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_typeSpecifier;
    return this;
}

TypeSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeSpecifierContext.prototype.constructor = TypeSpecifierContext;


 
TypeSpecifierContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function EnumerationSpecifierContext(parser, ctx) {
	TypeSpecifierContext.call(this, parser);
    TypeSpecifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

EnumerationSpecifierContext.prototype = Object.create(TypeSpecifierContext.prototype);
EnumerationSpecifierContext.prototype.constructor = EnumerationSpecifierContext;

CParser.EnumerationSpecifierContext = EnumerationSpecifierContext;

EnumerationSpecifierContext.prototype.enumSpecifier = function() {
    return this.getTypedRuleContext(EnumSpecifierContext,0);
};
EnumerationSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterEnumerationSpecifier(this);
	}
};

EnumerationSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitEnumerationSpecifier(this);
	}
};


function StructUnionSpecifierContext(parser, ctx) {
	TypeSpecifierContext.call(this, parser);
    TypeSpecifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

StructUnionSpecifierContext.prototype = Object.create(TypeSpecifierContext.prototype);
StructUnionSpecifierContext.prototype.constructor = StructUnionSpecifierContext;

CParser.StructUnionSpecifierContext = StructUnionSpecifierContext;

StructUnionSpecifierContext.prototype.structOrUnionSpecifier = function() {
    return this.getTypedRuleContext(StructOrUnionSpecifierContext,0);
};
StructUnionSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterStructUnionSpecifier(this);
	}
};

StructUnionSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitStructUnionSpecifier(this);
	}
};


function BasicTypeSpecifierContext(parser, ctx) {
	TypeSpecifierContext.call(this, parser);
    TypeSpecifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BasicTypeSpecifierContext.prototype = Object.create(TypeSpecifierContext.prototype);
BasicTypeSpecifierContext.prototype.constructor = BasicTypeSpecifierContext;

CParser.BasicTypeSpecifierContext = BasicTypeSpecifierContext;

BasicTypeSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterBasicTypeSpecifier(this);
	}
};

BasicTypeSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitBasicTypeSpecifier(this);
	}
};


function TypeDefSpecifierContext(parser, ctx) {
	TypeSpecifierContext.call(this, parser);
    TypeSpecifierContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TypeDefSpecifierContext.prototype = Object.create(TypeSpecifierContext.prototype);
TypeDefSpecifierContext.prototype.constructor = TypeDefSpecifierContext;

CParser.TypeDefSpecifierContext = TypeDefSpecifierContext;

TypeDefSpecifierContext.prototype.typedefName = function() {
    return this.getTypedRuleContext(TypedefNameContext,0);
};
TypeDefSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterTypeDefSpecifier(this);
	}
};

TypeDefSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitTypeDefSpecifier(this);
	}
};



CParser.TypeSpecifierContext = TypeSpecifierContext;

CParser.prototype.typeSpecifier = function() {

    var localctx = new TypeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, CParser.RULE_typeSpecifier);
    var _la = 0; // Token type
    try {
        this.state = 468;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CParser.Char:
        case CParser.Double:
        case CParser.Float:
        case CParser.Int:
        case CParser.Long:
        case CParser.Short:
        case CParser.Signed:
        case CParser.Unsigned:
        case CParser.Void:
            localctx = new BasicTypeSpecifierContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 464;
            _la = this._input.LA(1);
            if(!(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (CParser.Char - 10)) | (1 << (CParser.Double - 10)) | (1 << (CParser.Float - 10)) | (1 << (CParser.Int - 10)) | (1 << (CParser.Long - 10)) | (1 << (CParser.Short - 10)) | (1 << (CParser.Signed - 10)) | (1 << (CParser.Unsigned - 10)) | (1 << (CParser.Void - 10)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case CParser.Struct:
        case CParser.Union:
            localctx = new StructUnionSpecifierContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 465;
            this.structOrUnionSpecifier();
            break;
        case CParser.Enum:
            localctx = new EnumerationSpecifierContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 466;
            this.enumSpecifier();
            break;
        case CParser.Identifier:
            localctx = new TypeDefSpecifierContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 467;
            this.typedefName();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StructOrUnionSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_structOrUnionSpecifier;
    return this;
}

StructOrUnionSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructOrUnionSpecifierContext.prototype.constructor = StructOrUnionSpecifierContext;

StructOrUnionSpecifierContext.prototype.structOrUnion = function() {
    return this.getTypedRuleContext(StructOrUnionContext,0);
};

StructOrUnionSpecifierContext.prototype.structDeclarationList = function() {
    return this.getTypedRuleContext(StructDeclarationListContext,0);
};

StructOrUnionSpecifierContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

StructOrUnionSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterStructOrUnionSpecifier(this);
	}
};

StructOrUnionSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitStructOrUnionSpecifier(this);
	}
};




CParser.StructOrUnionSpecifierContext = StructOrUnionSpecifierContext;

CParser.prototype.structOrUnionSpecifier = function() {

    var localctx = new StructOrUnionSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, CParser.RULE_structOrUnionSpecifier);
    var _la = 0; // Token type
    try {
        this.state = 481;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 470;
            this.structOrUnion();
            this.state = 472;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CParser.Identifier) {
                this.state = 471;
                this.match(CParser.Identifier);
            }

            this.state = 474;
            this.match(CParser.LeftBrace);
            this.state = 475;
            this.structDeclarationList(0);
            this.state = 476;
            this.match(CParser.RightBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 478;
            this.structOrUnion();
            this.state = 479;
            this.match(CParser.Identifier);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StructOrUnionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_structOrUnion;
    return this;
}

StructOrUnionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructOrUnionContext.prototype.constructor = StructOrUnionContext;


StructOrUnionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterStructOrUnion(this);
	}
};

StructOrUnionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitStructOrUnion(this);
	}
};




CParser.StructOrUnionContext = StructOrUnionContext;

CParser.prototype.structOrUnion = function() {

    var localctx = new StructOrUnionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, CParser.RULE_structOrUnion);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 483;
        _la = this._input.LA(1);
        if(!(_la===CParser.Struct || _la===CParser.Union)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StructDeclarationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_structDeclarationList;
    return this;
}

StructDeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructDeclarationListContext.prototype.constructor = StructDeclarationListContext;

StructDeclarationListContext.prototype.structDeclaration = function() {
    return this.getTypedRuleContext(StructDeclarationContext,0);
};

StructDeclarationListContext.prototype.structDeclarationList = function() {
    return this.getTypedRuleContext(StructDeclarationListContext,0);
};

StructDeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterStructDeclarationList(this);
	}
};

StructDeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitStructDeclarationList(this);
	}
};



CParser.prototype.structDeclarationList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new StructDeclarationListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 62;
    this.enterRecursionRule(localctx, 62, CParser.RULE_structDeclarationList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 486;
        this.structDeclaration();
        this._ctx.stop = this._input.LT(-1);
        this.state = 492;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new StructDeclarationListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_structDeclarationList);
                this.state = 488;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 489;
                this.structDeclaration(); 
            }
            this.state = 494;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function StructDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_structDeclaration;
    return this;
}

StructDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructDeclarationContext.prototype.constructor = StructDeclarationContext;

StructDeclarationContext.prototype.specifierQualifierList = function() {
    return this.getTypedRuleContext(SpecifierQualifierListContext,0);
};

StructDeclarationContext.prototype.structDeclaratorList = function() {
    return this.getTypedRuleContext(StructDeclaratorListContext,0);
};

StructDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterStructDeclaration(this);
	}
};

StructDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitStructDeclaration(this);
	}
};




CParser.StructDeclarationContext = StructDeclarationContext;

CParser.prototype.structDeclaration = function() {

    var localctx = new StructDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, CParser.RULE_structDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 495;
        this.specifierQualifierList();
        this.state = 497;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (CParser.LeftParen - 41)) | (1 << (CParser.Star - 41)) | (1 << (CParser.Caret - 41)) | (1 << (CParser.Colon - 41)))) !== 0) || _la===CParser.Identifier) {
            this.state = 496;
            this.structDeclaratorList(0);
        }

        this.state = 499;
        this.match(CParser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SpecifierQualifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_specifierQualifierList;
    return this;
}

SpecifierQualifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SpecifierQualifierListContext.prototype.constructor = SpecifierQualifierListContext;

SpecifierQualifierListContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};

SpecifierQualifierListContext.prototype.specifierQualifierList = function() {
    return this.getTypedRuleContext(SpecifierQualifierListContext,0);
};

SpecifierQualifierListContext.prototype.typeQualifier = function() {
    return this.getTypedRuleContext(TypeQualifierContext,0);
};

SpecifierQualifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterSpecifierQualifierList(this);
	}
};

SpecifierQualifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitSpecifierQualifierList(this);
	}
};




CParser.SpecifierQualifierListContext = SpecifierQualifierListContext;

CParser.prototype.specifierQualifierList = function() {

    var localctx = new SpecifierQualifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, CParser.RULE_specifierQualifierList);
    try {
        this.state = 509;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CParser.Char:
        case CParser.Double:
        case CParser.Enum:
        case CParser.Float:
        case CParser.Int:
        case CParser.Long:
        case CParser.Short:
        case CParser.Signed:
        case CParser.Struct:
        case CParser.Union:
        case CParser.Unsigned:
        case CParser.Void:
        case CParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 501;
            this.typeSpecifier();
            this.state = 503;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
            if(la_===1) {
                this.state = 502;
                this.specifierQualifierList();

            }
            break;
        case CParser.T__0:
        case CParser.Const:
        case CParser.Restrict:
        case CParser.Volatile:
            this.enterOuterAlt(localctx, 2);
            this.state = 505;
            this.typeQualifier();
            this.state = 507;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
            if(la_===1) {
                this.state = 506;
                this.specifierQualifierList();

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StructDeclaratorListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_structDeclaratorList;
    return this;
}

StructDeclaratorListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructDeclaratorListContext.prototype.constructor = StructDeclaratorListContext;

StructDeclaratorListContext.prototype.structDeclarator = function() {
    return this.getTypedRuleContext(StructDeclaratorContext,0);
};

StructDeclaratorListContext.prototype.structDeclaratorList = function() {
    return this.getTypedRuleContext(StructDeclaratorListContext,0);
};

StructDeclaratorListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterStructDeclaratorList(this);
	}
};

StructDeclaratorListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitStructDeclaratorList(this);
	}
};



CParser.prototype.structDeclaratorList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new StructDeclaratorListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 68;
    this.enterRecursionRule(localctx, 68, CParser.RULE_structDeclaratorList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 512;
        this.structDeclarator();
        this._ctx.stop = this._input.LT(-1);
        this.state = 519;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new StructDeclaratorListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_structDeclaratorList);
                this.state = 514;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 515;
                this.match(CParser.Comma);
                this.state = 516;
                this.structDeclarator(); 
            }
            this.state = 521;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function StructDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_structDeclarator;
    return this;
}

StructDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructDeclaratorContext.prototype.constructor = StructDeclaratorContext;

StructDeclaratorContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

StructDeclaratorContext.prototype.constantExpression = function() {
    return this.getTypedRuleContext(ConstantExpressionContext,0);
};

StructDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterStructDeclarator(this);
	}
};

StructDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitStructDeclarator(this);
	}
};




CParser.StructDeclaratorContext = StructDeclaratorContext;

CParser.prototype.structDeclarator = function() {

    var localctx = new StructDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, CParser.RULE_structDeclarator);
    var _la = 0; // Token type
    try {
        this.state = 528;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 522;
            this.declarator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 524;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (CParser.LeftParen - 41)) | (1 << (CParser.Star - 41)) | (1 << (CParser.Caret - 41)))) !== 0) || _la===CParser.Identifier) {
                this.state = 523;
                this.declarator();
            }

            this.state = 526;
            this.match(CParser.Colon);
            this.state = 527;
            this.constantExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_enumSpecifier;
    return this;
}

EnumSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumSpecifierContext.prototype.constructor = EnumSpecifierContext;

EnumSpecifierContext.prototype.enumeratorList = function() {
    return this.getTypedRuleContext(EnumeratorListContext,0);
};

EnumSpecifierContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

EnumSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterEnumSpecifier(this);
	}
};

EnumSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitEnumSpecifier(this);
	}
};




CParser.EnumSpecifierContext = EnumSpecifierContext;

CParser.prototype.enumSpecifier = function() {

    var localctx = new EnumSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, CParser.RULE_enumSpecifier);
    var _la = 0; // Token type
    try {
        this.state = 549;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 530;
            this.match(CParser.Enum);
            this.state = 532;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CParser.Identifier) {
                this.state = 531;
                this.match(CParser.Identifier);
            }

            this.state = 534;
            this.match(CParser.LeftBrace);
            this.state = 535;
            this.enumeratorList(0);
            this.state = 536;
            this.match(CParser.RightBrace);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 538;
            this.match(CParser.Enum);
            this.state = 540;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CParser.Identifier) {
                this.state = 539;
                this.match(CParser.Identifier);
            }

            this.state = 542;
            this.match(CParser.LeftBrace);
            this.state = 543;
            this.enumeratorList(0);
            this.state = 544;
            this.match(CParser.Comma);
            this.state = 545;
            this.match(CParser.RightBrace);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 547;
            this.match(CParser.Enum);
            this.state = 548;
            this.match(CParser.Identifier);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumeratorListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_enumeratorList;
    return this;
}

EnumeratorListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratorListContext.prototype.constructor = EnumeratorListContext;

EnumeratorListContext.prototype.enumerator = function() {
    return this.getTypedRuleContext(EnumeratorContext,0);
};

EnumeratorListContext.prototype.enumeratorList = function() {
    return this.getTypedRuleContext(EnumeratorListContext,0);
};

EnumeratorListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterEnumeratorList(this);
	}
};

EnumeratorListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitEnumeratorList(this);
	}
};



CParser.prototype.enumeratorList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new EnumeratorListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 74;
    this.enterRecursionRule(localctx, 74, CParser.RULE_enumeratorList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 552;
        this.enumerator();
        this._ctx.stop = this._input.LT(-1);
        this.state = 559;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,47,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new EnumeratorListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_enumeratorList);
                this.state = 554;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 555;
                this.match(CParser.Comma);
                this.state = 556;
                this.enumerator(); 
            }
            this.state = 561;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,47,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function EnumeratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_enumerator;
    return this;
}

EnumeratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumeratorContext.prototype.constructor = EnumeratorContext;

EnumeratorContext.prototype.enumerationConstant = function() {
    return this.getTypedRuleContext(EnumerationConstantContext,0);
};

EnumeratorContext.prototype.constantExpression = function() {
    return this.getTypedRuleContext(ConstantExpressionContext,0);
};

EnumeratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterEnumerator(this);
	}
};

EnumeratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitEnumerator(this);
	}
};




CParser.EnumeratorContext = EnumeratorContext;

CParser.prototype.enumerator = function() {

    var localctx = new EnumeratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, CParser.RULE_enumerator);
    try {
        this.state = 567;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 562;
            this.enumerationConstant();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 563;
            this.enumerationConstant();
            this.state = 564;
            this.match(CParser.Assign);
            this.state = 565;
            this.constantExpression();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumerationConstantContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_enumerationConstant;
    return this;
}

EnumerationConstantContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumerationConstantContext.prototype.constructor = EnumerationConstantContext;

EnumerationConstantContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

EnumerationConstantContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterEnumerationConstant(this);
	}
};

EnumerationConstantContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitEnumerationConstant(this);
	}
};




CParser.EnumerationConstantContext = EnumerationConstantContext;

CParser.prototype.enumerationConstant = function() {

    var localctx = new EnumerationConstantContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, CParser.RULE_enumerationConstant);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 569;
        this.match(CParser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AtomicTypeSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_atomicTypeSpecifier;
    return this;
}

AtomicTypeSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomicTypeSpecifierContext.prototype.constructor = AtomicTypeSpecifierContext;

AtomicTypeSpecifierContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

AtomicTypeSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterAtomicTypeSpecifier(this);
	}
};

AtomicTypeSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitAtomicTypeSpecifier(this);
	}
};




CParser.AtomicTypeSpecifierContext = AtomicTypeSpecifierContext;

CParser.prototype.atomicTypeSpecifier = function() {

    var localctx = new AtomicTypeSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, CParser.RULE_atomicTypeSpecifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 571;
        this.match(CParser.T__0);
        this.state = 572;
        this.match(CParser.LeftParen);
        this.state = 573;
        this.typeName();
        this.state = 574;
        this.match(CParser.RightParen);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeQualifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_typeQualifier;
    return this;
}

TypeQualifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeQualifierContext.prototype.constructor = TypeQualifierContext;


TypeQualifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterTypeQualifier(this);
	}
};

TypeQualifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitTypeQualifier(this);
	}
};




CParser.TypeQualifierContext = TypeQualifierContext;

CParser.prototype.typeQualifier = function() {

    var localctx = new TypeQualifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, CParser.RULE_typeQualifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 576;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.Const) | (1 << CParser.Restrict))) !== 0) || _la===CParser.Volatile)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_functionSpecifier;
    return this;
}

FunctionSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionSpecifierContext.prototype.constructor = FunctionSpecifierContext;


FunctionSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterFunctionSpecifier(this);
	}
};

FunctionSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitFunctionSpecifier(this);
	}
};




CParser.FunctionSpecifierContext = FunctionSpecifierContext;

CParser.prototype.functionSpecifier = function() {

    var localctx = new FunctionSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, CParser.RULE_functionSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 578;
        _la = this._input.LA(1);
        if(!(_la===CParser.T__1 || _la===CParser.Inline)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlignmentSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_alignmentSpecifier;
    return this;
}

AlignmentSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlignmentSpecifierContext.prototype.constructor = AlignmentSpecifierContext;

AlignmentSpecifierContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

AlignmentSpecifierContext.prototype.constantExpression = function() {
    return this.getTypedRuleContext(ConstantExpressionContext,0);
};

AlignmentSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterAlignmentSpecifier(this);
	}
};

AlignmentSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitAlignmentSpecifier(this);
	}
};




CParser.AlignmentSpecifierContext = AlignmentSpecifierContext;

CParser.prototype.alignmentSpecifier = function() {

    var localctx = new AlignmentSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, CParser.RULE_alignmentSpecifier);
    try {
        this.state = 590;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 580;
            this.match(CParser.T__2);
            this.state = 581;
            this.match(CParser.LeftParen);
            this.state = 582;
            this.typeName();
            this.state = 583;
            this.match(CParser.RightParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 585;
            this.match(CParser.T__2);
            this.state = 586;
            this.match(CParser.LeftParen);
            this.state = 587;
            this.constantExpression();
            this.state = 588;
            this.match(CParser.RightParen);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_declarator;
    return this;
}

DeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclaratorContext.prototype.constructor = DeclaratorContext;

DeclaratorContext.prototype.directDeclarator = function() {
    return this.getTypedRuleContext(DirectDeclaratorContext,0);
};

DeclaratorContext.prototype.pointer = function() {
    return this.getTypedRuleContext(PointerContext,0);
};

DeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterDeclarator(this);
	}
};

DeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitDeclarator(this);
	}
};




CParser.DeclaratorContext = DeclaratorContext;

CParser.prototype.declarator = function() {

    var localctx = new DeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, CParser.RULE_declarator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 593;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CParser.Star || _la===CParser.Caret) {
            this.state = 592;
            this.pointer(0);
        }

        this.state = 595;
        this.directDeclarator(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DirectDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_directDeclarator;
    return this;
}

DirectDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DirectDeclaratorContext.prototype.constructor = DirectDeclaratorContext;

DirectDeclaratorContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

DirectDeclaratorContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

DirectDeclaratorContext.prototype.DigitSequence = function() {
    return this.getToken(CParser.DigitSequence, 0);
};

DirectDeclaratorContext.prototype.pointer = function() {
    return this.getTypedRuleContext(PointerContext,0);
};

DirectDeclaratorContext.prototype.directDeclarator = function() {
    return this.getTypedRuleContext(DirectDeclaratorContext,0);
};

DirectDeclaratorContext.prototype.typeSpecifier = function() {
    return this.getTypedRuleContext(TypeSpecifierContext,0);
};

DirectDeclaratorContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

DirectDeclaratorContext.prototype.parameterTypeList = function() {
    return this.getTypedRuleContext(ParameterTypeListContext,0);
};

DirectDeclaratorContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

DirectDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterDirectDeclarator(this);
	}
};

DirectDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitDirectDeclarator(this);
	}
};



CParser.prototype.directDeclarator = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new DirectDeclaratorContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 90;
    this.enterRecursionRule(localctx, 90, CParser.RULE_directDeclarator, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 614;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        switch(la_) {
        case 1:
            this.state = 598;
            this.match(CParser.Identifier);
            break;

        case 2:
            this.state = 599;
            this.match(CParser.LeftParen);
            this.state = 600;
            this.declarator();
            this.state = 601;
            this.match(CParser.RightParen);
            break;

        case 3:
            this.state = 603;
            this.match(CParser.Identifier);
            this.state = 604;
            this.match(CParser.Colon);
            this.state = 605;
            this.match(CParser.DigitSequence);
            break;

        case 4:
            this.state = 606;
            this.match(CParser.LeftParen);
            this.state = 608;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 10)) & ~0x1f) == 0 && ((1 << (_la - 10)) & ((1 << (CParser.Char - 10)) | (1 << (CParser.Double - 10)) | (1 << (CParser.Enum - 10)) | (1 << (CParser.Float - 10)) | (1 << (CParser.Int - 10)) | (1 << (CParser.Long - 10)) | (1 << (CParser.Short - 10)) | (1 << (CParser.Signed - 10)) | (1 << (CParser.Struct - 10)) | (1 << (CParser.Union - 10)) | (1 << (CParser.Unsigned - 10)) | (1 << (CParser.Void - 10)))) !== 0) || _la===CParser.Identifier) {
                this.state = 607;
                this.typeSpecifier();
            }

            this.state = 610;
            this.pointer(0);
            this.state = 611;
            this.directDeclarator(0);
            this.state = 612;
            this.match(CParser.RightParen);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 635;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,56,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 633;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new DirectDeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directDeclarator);
                    this.state = 616;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 617;
                    this.match(CParser.LeftBracket);
                    this.state = 619;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (CParser.Sizeof - 31)) | (1 << (CParser.LeftParen - 31)) | (1 << (CParser.Plus - 31)) | (1 << (CParser.PlusPlus - 31)) | (1 << (CParser.Minus - 31)) | (1 << (CParser.MinusMinus - 31)) | (1 << (CParser.Star - 31)) | (1 << (CParser.And - 31)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) !== 0)) {
                        this.state = 618;
                        this.assignmentExpression();
                    }

                    this.state = 621;
                    this.match(CParser.RightBracket);
                    break;

                case 2:
                    localctx = new DirectDeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directDeclarator);
                    this.state = 622;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 623;
                    this.match(CParser.LeftParen);
                    this.state = 624;
                    this.parameterTypeList();
                    this.state = 625;
                    this.match(CParser.RightParen);
                    break;

                case 3:
                    localctx = new DirectDeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directDeclarator);
                    this.state = 627;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 628;
                    this.match(CParser.LeftParen);
                    this.state = 630;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===CParser.Identifier) {
                        this.state = 629;
                        this.identifierList(0);
                    }

                    this.state = 632;
                    this.match(CParser.RightParen);
                    break;

                } 
            }
            this.state = 637;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,56,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function PointerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_pointer;
    return this;
}

PointerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PointerContext.prototype.constructor = PointerContext;

PointerContext.prototype.typeQualifierList = function() {
    return this.getTypedRuleContext(TypeQualifierListContext,0);
};

PointerContext.prototype.pointer = function() {
    return this.getTypedRuleContext(PointerContext,0);
};

PointerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterPointer(this);
	}
};

PointerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitPointer(this);
	}
};



CParser.prototype.pointer = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new PointerContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 92;
    this.enterRecursionRule(localctx, 92, CParser.RULE_pointer, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 652;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
        switch(la_) {
        case 1:
            this.state = 639;
            this.match(CParser.Star);
            this.state = 641;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
            if(la_===1) {
                this.state = 640;
                this.typeQualifierList(0);

            }
            break;

        case 2:
            this.state = 643;
            this.match(CParser.Caret);
            this.state = 645;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
            if(la_===1) {
                this.state = 644;
                this.typeQualifierList(0);

            }
            break;

        case 3:
            this.state = 647;
            this.match(CParser.Caret);
            this.state = 649;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.Const) | (1 << CParser.Restrict))) !== 0) || _la===CParser.Volatile) {
                this.state = 648;
                this.typeQualifierList(0);
            }

            this.state = 651;
            this.pointer(1);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 661;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new PointerContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_pointer);
                this.state = 654;
                if (!( this.precpred(this._ctx, 3))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                }
                this.state = 655;
                this.match(CParser.Star);
                this.state = 657;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
                if(la_===1) {
                    this.state = 656;
                    this.typeQualifierList(0);

                } 
            }
            this.state = 663;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function TypeQualifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_typeQualifierList;
    return this;
}

TypeQualifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeQualifierListContext.prototype.constructor = TypeQualifierListContext;

TypeQualifierListContext.prototype.typeQualifier = function() {
    return this.getTypedRuleContext(TypeQualifierContext,0);
};

TypeQualifierListContext.prototype.typeQualifierList = function() {
    return this.getTypedRuleContext(TypeQualifierListContext,0);
};

TypeQualifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterTypeQualifierList(this);
	}
};

TypeQualifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitTypeQualifierList(this);
	}
};



CParser.prototype.typeQualifierList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypeQualifierListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 94;
    this.enterRecursionRule(localctx, 94, CParser.RULE_typeQualifierList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 665;
        this.typeQualifier();
        this._ctx.stop = this._input.LT(-1);
        this.state = 671;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,63,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TypeQualifierListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_typeQualifierList);
                this.state = 667;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 668;
                this.typeQualifier(); 
            }
            this.state = 673;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,63,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ParameterTypeListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_parameterTypeList;
    return this;
}

ParameterTypeListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterTypeListContext.prototype.constructor = ParameterTypeListContext;

ParameterTypeListContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

ParameterTypeListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterParameterTypeList(this);
	}
};

ParameterTypeListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitParameterTypeList(this);
	}
};




CParser.ParameterTypeListContext = ParameterTypeListContext;

CParser.prototype.parameterTypeList = function() {

    var localctx = new ParameterTypeListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, CParser.RULE_parameterTypeList);
    try {
        this.state = 679;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 674;
            this.parameterList(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 675;
            this.parameterList(0);
            this.state = 676;
            this.match(CParser.Comma);
            this.state = 677;
            this.match(CParser.Ellipsis);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_parameterList;
    return this;
}

ParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterListContext.prototype.constructor = ParameterListContext;

ParameterListContext.prototype.parameterDeclaration = function() {
    return this.getTypedRuleContext(ParameterDeclarationContext,0);
};

ParameterListContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

ParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterParameterList(this);
	}
};

ParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitParameterList(this);
	}
};



CParser.prototype.parameterList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ParameterListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 98;
    this.enterRecursionRule(localctx, 98, CParser.RULE_parameterList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 682;
        this.parameterDeclaration();
        this._ctx.stop = this._input.LT(-1);
        this.state = 689;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ParameterListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_parameterList);
                this.state = 684;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 685;
                this.match(CParser.Comma);
                this.state = 686;
                this.parameterDeclaration(); 
            }
            this.state = 691;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ParameterDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_parameterDeclaration;
    return this;
}

ParameterDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterDeclarationContext.prototype.constructor = ParameterDeclarationContext;

ParameterDeclarationContext.prototype.declarationSpecifiers = function() {
    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
};

ParameterDeclarationContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

ParameterDeclarationContext.prototype.declarationSpecifiers2 = function() {
    return this.getTypedRuleContext(DeclarationSpecifiers2Context,0);
};

ParameterDeclarationContext.prototype.abstractDeclarator = function() {
    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
};

ParameterDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterParameterDeclaration(this);
	}
};

ParameterDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitParameterDeclaration(this);
	}
};




CParser.ParameterDeclarationContext = ParameterDeclarationContext;

CParser.prototype.parameterDeclaration = function() {

    var localctx = new ParameterDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, CParser.RULE_parameterDeclaration);
    try {
        this.state = 699;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 692;
            this.declarationSpecifiers();
            this.state = 693;
            this.declarator();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 695;
            this.declarationSpecifiers2();
            this.state = 697;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
            if(la_===1) {
                this.state = 696;
                this.abstractDeclarator();

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_identifierList;
    return this;
}

IdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierListContext.prototype.constructor = IdentifierListContext;

IdentifierListContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

IdentifierListContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

IdentifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterIdentifierList(this);
	}
};

IdentifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitIdentifierList(this);
	}
};



CParser.prototype.identifierList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new IdentifierListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 102;
    this.enterRecursionRule(localctx, 102, CParser.RULE_identifierList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 702;
        this.match(CParser.Identifier);
        this._ctx.stop = this._input.LT(-1);
        this.state = 709;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,68,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new IdentifierListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_identifierList);
                this.state = 704;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 705;
                this.match(CParser.Comma);
                this.state = 706;
                this.match(CParser.Identifier); 
            }
            this.state = 711;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,68,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function TypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_typeName;
    return this;
}

TypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeNameContext.prototype.constructor = TypeNameContext;

TypeNameContext.prototype.specifierQualifierList = function() {
    return this.getTypedRuleContext(SpecifierQualifierListContext,0);
};

TypeNameContext.prototype.abstractDeclarator = function() {
    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
};

TypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterTypeName(this);
	}
};

TypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitTypeName(this);
	}
};




CParser.TypeNameContext = TypeNameContext;

CParser.prototype.typeName = function() {

    var localctx = new TypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, CParser.RULE_typeName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 712;
        this.specifierQualifierList();
        this.state = 714;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (CParser.LeftParen - 41)) | (1 << (CParser.LeftBracket - 41)) | (1 << (CParser.Star - 41)) | (1 << (CParser.Caret - 41)))) !== 0)) {
            this.state = 713;
            this.abstractDeclarator();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_abstractDeclarator;
    return this;
}

AbstractDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractDeclaratorContext.prototype.constructor = AbstractDeclaratorContext;

AbstractDeclaratorContext.prototype.pointer = function() {
    return this.getTypedRuleContext(PointerContext,0);
};

AbstractDeclaratorContext.prototype.directAbstractDeclarator = function() {
    return this.getTypedRuleContext(DirectAbstractDeclaratorContext,0);
};

AbstractDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterAbstractDeclarator(this);
	}
};

AbstractDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitAbstractDeclarator(this);
	}
};




CParser.AbstractDeclaratorContext = AbstractDeclaratorContext;

CParser.prototype.abstractDeclarator = function() {

    var localctx = new AbstractDeclaratorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, CParser.RULE_abstractDeclarator);
    var _la = 0; // Token type
    try {
        this.state = 721;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 716;
            this.pointer(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 718;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===CParser.Star || _la===CParser.Caret) {
                this.state = 717;
                this.pointer(0);
            }

            this.state = 720;
            this.directAbstractDeclarator(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DirectAbstractDeclaratorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_directAbstractDeclarator;
    return this;
}

DirectAbstractDeclaratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DirectAbstractDeclaratorContext.prototype.constructor = DirectAbstractDeclaratorContext;

DirectAbstractDeclaratorContext.prototype.abstractDeclarator = function() {
    return this.getTypedRuleContext(AbstractDeclaratorContext,0);
};

DirectAbstractDeclaratorContext.prototype.typeQualifierList = function() {
    return this.getTypedRuleContext(TypeQualifierListContext,0);
};

DirectAbstractDeclaratorContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

DirectAbstractDeclaratorContext.prototype.parameterTypeList = function() {
    return this.getTypedRuleContext(ParameterTypeListContext,0);
};

DirectAbstractDeclaratorContext.prototype.directAbstractDeclarator = function() {
    return this.getTypedRuleContext(DirectAbstractDeclaratorContext,0);
};

DirectAbstractDeclaratorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterDirectAbstractDeclarator(this);
	}
};

DirectAbstractDeclaratorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitDirectAbstractDeclarator(this);
	}
};



CParser.prototype.directAbstractDeclarator = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new DirectAbstractDeclaratorContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 108;
    this.enterRecursionRule(localctx, 108, CParser.RULE_directAbstractDeclarator, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 758;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
        switch(la_) {
        case 1:
            this.state = 724;
            this.match(CParser.LeftParen);
            this.state = 725;
            this.abstractDeclarator();
            this.state = 726;
            this.match(CParser.RightParen);
            break;

        case 2:
            this.state = 728;
            this.match(CParser.LeftBracket);
            this.state = 730;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.Const) | (1 << CParser.Restrict))) !== 0) || _la===CParser.Volatile) {
                this.state = 729;
                this.typeQualifierList(0);
            }

            this.state = 733;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (CParser.Sizeof - 31)) | (1 << (CParser.LeftParen - 31)) | (1 << (CParser.Plus - 31)) | (1 << (CParser.PlusPlus - 31)) | (1 << (CParser.Minus - 31)) | (1 << (CParser.MinusMinus - 31)) | (1 << (CParser.Star - 31)) | (1 << (CParser.And - 31)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) !== 0)) {
                this.state = 732;
                this.assignmentExpression();
            }

            this.state = 735;
            this.match(CParser.RightBracket);
            break;

        case 3:
            this.state = 736;
            this.match(CParser.LeftBracket);
            this.state = 737;
            this.match(CParser.Static);
            this.state = 739;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.Const) | (1 << CParser.Restrict))) !== 0) || _la===CParser.Volatile) {
                this.state = 738;
                this.typeQualifierList(0);
            }

            this.state = 741;
            this.assignmentExpression();
            this.state = 742;
            this.match(CParser.RightBracket);
            break;

        case 4:
            this.state = 744;
            this.match(CParser.LeftBracket);
            this.state = 745;
            this.typeQualifierList(0);
            this.state = 746;
            this.match(CParser.Static);
            this.state = 747;
            this.assignmentExpression();
            this.state = 748;
            this.match(CParser.RightBracket);
            break;

        case 5:
            this.state = 750;
            this.match(CParser.LeftBracket);
            this.state = 751;
            this.match(CParser.Star);
            this.state = 752;
            this.match(CParser.RightBracket);
            break;

        case 6:
            this.state = 753;
            this.match(CParser.LeftParen);
            this.state = 755;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)))) !== 0) || _la===CParser.Identifier) {
                this.state = 754;
                this.parameterTypeList();
            }

            this.state = 757;
            this.match(CParser.RightParen);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 797;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,82,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 795;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new DirectAbstractDeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directAbstractDeclarator);
                    this.state = 760;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 761;
                    this.match(CParser.LeftBracket);
                    this.state = 763;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.Const) | (1 << CParser.Restrict))) !== 0) || _la===CParser.Volatile) {
                        this.state = 762;
                        this.typeQualifierList(0);
                    }

                    this.state = 766;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (CParser.Sizeof - 31)) | (1 << (CParser.LeftParen - 31)) | (1 << (CParser.Plus - 31)) | (1 << (CParser.PlusPlus - 31)) | (1 << (CParser.Minus - 31)) | (1 << (CParser.MinusMinus - 31)) | (1 << (CParser.Star - 31)) | (1 << (CParser.And - 31)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) !== 0)) {
                        this.state = 765;
                        this.assignmentExpression();
                    }

                    this.state = 768;
                    this.match(CParser.RightBracket);
                    break;

                case 2:
                    localctx = new DirectAbstractDeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directAbstractDeclarator);
                    this.state = 769;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 770;
                    this.match(CParser.LeftBracket);
                    this.state = 771;
                    this.match(CParser.Static);
                    this.state = 773;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.Const) | (1 << CParser.Restrict))) !== 0) || _la===CParser.Volatile) {
                        this.state = 772;
                        this.typeQualifierList(0);
                    }

                    this.state = 775;
                    this.assignmentExpression();
                    this.state = 776;
                    this.match(CParser.RightBracket);
                    break;

                case 3:
                    localctx = new DirectAbstractDeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directAbstractDeclarator);
                    this.state = 778;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 779;
                    this.match(CParser.LeftBracket);
                    this.state = 780;
                    this.typeQualifierList(0);
                    this.state = 781;
                    this.match(CParser.Static);
                    this.state = 782;
                    this.assignmentExpression();
                    this.state = 783;
                    this.match(CParser.RightBracket);
                    break;

                case 4:
                    localctx = new DirectAbstractDeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directAbstractDeclarator);
                    this.state = 785;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 786;
                    this.match(CParser.LeftBracket);
                    this.state = 787;
                    this.match(CParser.Star);
                    this.state = 788;
                    this.match(CParser.RightBracket);
                    break;

                case 5:
                    localctx = new DirectAbstractDeclaratorContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, CParser.RULE_directAbstractDeclarator);
                    this.state = 789;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }
                    this.state = 790;
                    this.match(CParser.LeftParen);
                    this.state = 792;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)))) !== 0) || _la===CParser.Identifier) {
                        this.state = 791;
                        this.parameterTypeList();
                    }

                    this.state = 794;
                    this.match(CParser.RightParen);
                    break;

                } 
            }
            this.state = 799;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,82,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function TypedefNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_typedefName;
    return this;
}

TypedefNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedefNameContext.prototype.constructor = TypedefNameContext;

TypedefNameContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

TypedefNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterTypedefName(this);
	}
};

TypedefNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitTypedefName(this);
	}
};




CParser.TypedefNameContext = TypedefNameContext;

CParser.prototype.typedefName = function() {

    var localctx = new TypedefNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, CParser.RULE_typedefName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 800;
        this.match(CParser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitializerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_initializer;
    return this;
}

InitializerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerContext.prototype.constructor = InitializerContext;

InitializerContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

InitializerContext.prototype.initializerList = function() {
    return this.getTypedRuleContext(InitializerListContext,0);
};

InitializerContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterInitializer(this);
	}
};

InitializerContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitInitializer(this);
	}
};




CParser.InitializerContext = InitializerContext;

CParser.prototype.initializer = function() {

    var localctx = new InitializerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, CParser.RULE_initializer);
    try {
        this.state = 812;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 802;
            this.assignmentExpression();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 803;
            this.match(CParser.LeftBrace);
            this.state = 804;
            this.initializerList(0);
            this.state = 805;
            this.match(CParser.RightBrace);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 807;
            this.match(CParser.LeftBrace);
            this.state = 808;
            this.initializerList(0);
            this.state = 809;
            this.match(CParser.Comma);
            this.state = 810;
            this.match(CParser.RightBrace);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InitializerListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_initializerList;
    return this;
}

InitializerListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InitializerListContext.prototype.constructor = InitializerListContext;

InitializerListContext.prototype.initializer = function() {
    return this.getTypedRuleContext(InitializerContext,0);
};

InitializerListContext.prototype.designation = function() {
    return this.getTypedRuleContext(DesignationContext,0);
};

InitializerListContext.prototype.initializerList = function() {
    return this.getTypedRuleContext(InitializerListContext,0);
};

InitializerListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterInitializerList(this);
	}
};

InitializerListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitInitializerList(this);
	}
};



CParser.prototype.initializerList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new InitializerListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 114;
    this.enterRecursionRule(localctx, 114, CParser.RULE_initializerList, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 816;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===CParser.LeftBracket || _la===CParser.Dot) {
            this.state = 815;
            this.designation();
        }

        this.state = 818;
        this.initializer();
        this._ctx.stop = this._input.LT(-1);
        this.state = 828;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,86,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new InitializerListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_initializerList);
                this.state = 820;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 821;
                this.match(CParser.Comma);
                this.state = 823;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===CParser.LeftBracket || _la===CParser.Dot) {
                    this.state = 822;
                    this.designation();
                }

                this.state = 825;
                this.initializer(); 
            }
            this.state = 830;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,86,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function DesignationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_designation;
    return this;
}

DesignationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DesignationContext.prototype.constructor = DesignationContext;

DesignationContext.prototype.designatorList = function() {
    return this.getTypedRuleContext(DesignatorListContext,0);
};

DesignationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterDesignation(this);
	}
};

DesignationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitDesignation(this);
	}
};




CParser.DesignationContext = DesignationContext;

CParser.prototype.designation = function() {

    var localctx = new DesignationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, CParser.RULE_designation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 831;
        this.designatorList(0);
        this.state = 832;
        this.match(CParser.Assign);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DesignatorListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_designatorList;
    return this;
}

DesignatorListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DesignatorListContext.prototype.constructor = DesignatorListContext;

DesignatorListContext.prototype.designator = function() {
    return this.getTypedRuleContext(DesignatorContext,0);
};

DesignatorListContext.prototype.designatorList = function() {
    return this.getTypedRuleContext(DesignatorListContext,0);
};

DesignatorListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterDesignatorList(this);
	}
};

DesignatorListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitDesignatorList(this);
	}
};



CParser.prototype.designatorList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new DesignatorListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 118;
    this.enterRecursionRule(localctx, 118, CParser.RULE_designatorList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 835;
        this.designator();
        this._ctx.stop = this._input.LT(-1);
        this.state = 841;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,87,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new DesignatorListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_designatorList);
                this.state = 837;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 838;
                this.designator(); 
            }
            this.state = 843;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,87,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function DesignatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_designator;
    return this;
}

DesignatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DesignatorContext.prototype.constructor = DesignatorContext;

DesignatorContext.prototype.constantExpression = function() {
    return this.getTypedRuleContext(ConstantExpressionContext,0);
};

DesignatorContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

DesignatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterDesignator(this);
	}
};

DesignatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitDesignator(this);
	}
};




CParser.DesignatorContext = DesignatorContext;

CParser.prototype.designator = function() {

    var localctx = new DesignatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, CParser.RULE_designator);
    try {
        this.state = 850;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CParser.LeftBracket:
            this.enterOuterAlt(localctx, 1);
            this.state = 844;
            this.match(CParser.LeftBracket);
            this.state = 845;
            this.constantExpression();
            this.state = 846;
            this.match(CParser.RightBracket);
            break;
        case CParser.Dot:
            this.enterOuterAlt(localctx, 2);
            this.state = 848;
            this.match(CParser.Dot);
            this.state = 849;
            this.match(CParser.Identifier);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.labeledStatement = function() {
    return this.getTypedRuleContext(LabeledStatementContext,0);
};

StatementContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

StatementContext.prototype.expressionStatement = function() {
    return this.getTypedRuleContext(ExpressionStatementContext,0);
};

StatementContext.prototype.selectionStatement = function() {
    return this.getTypedRuleContext(SelectionStatementContext,0);
};

StatementContext.prototype.iterationStatement = function() {
    return this.getTypedRuleContext(IterationStatementContext,0);
};

StatementContext.prototype.jumpStatement = function() {
    return this.getTypedRuleContext(JumpStatementContext,0);
};

StatementContext.prototype.logicalOrExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LogicalOrExpressionContext);
    } else {
        return this.getTypedRuleContext(LogicalOrExpressionContext,i);
    }
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitStatement(this);
	}
};




CParser.StatementContext = StatementContext;

CParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, CParser.RULE_statement);
    var _la = 0; // Token type
    try {
        this.state = 889;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 852;
            this.labeledStatement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 853;
            this.compoundStatement();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 854;
            this.expressionStatement();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 855;
            this.selectionStatement();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 856;
            this.iterationStatement();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 857;
            this.jumpStatement();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 858;
            _la = this._input.LA(1);
            if(!(_la===CParser.T__3 || _la===CParser.T__4)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 859;
            _la = this._input.LA(1);
            if(!(_la===CParser.T__5 || _la===CParser.Volatile)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 860;
            this.match(CParser.LeftParen);
            this.state = 869;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (CParser.Sizeof - 31)) | (1 << (CParser.LeftParen - 31)) | (1 << (CParser.Plus - 31)) | (1 << (CParser.PlusPlus - 31)) | (1 << (CParser.Minus - 31)) | (1 << (CParser.MinusMinus - 31)) | (1 << (CParser.Star - 31)) | (1 << (CParser.And - 31)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) !== 0)) {
                this.state = 861;
                this.logicalOrExpression(0);
                this.state = 866;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===CParser.Comma) {
                    this.state = 862;
                    this.match(CParser.Comma);
                    this.state = 863;
                    this.logicalOrExpression(0);
                    this.state = 868;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 884;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===CParser.Colon) {
                this.state = 871;
                this.match(CParser.Colon);
                this.state = 880;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (CParser.Sizeof - 31)) | (1 << (CParser.LeftParen - 31)) | (1 << (CParser.Plus - 31)) | (1 << (CParser.PlusPlus - 31)) | (1 << (CParser.Minus - 31)) | (1 << (CParser.MinusMinus - 31)) | (1 << (CParser.Star - 31)) | (1 << (CParser.And - 31)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) !== 0)) {
                    this.state = 872;
                    this.logicalOrExpression(0);
                    this.state = 877;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    while(_la===CParser.Comma) {
                        this.state = 873;
                        this.match(CParser.Comma);
                        this.state = 874;
                        this.logicalOrExpression(0);
                        this.state = 879;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                    }
                }

                this.state = 886;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 887;
            this.match(CParser.RightParen);
            this.state = 888;
            this.match(CParser.Semi);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabeledStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_labeledStatement;
    return this;
}

LabeledStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabeledStatementContext.prototype.constructor = LabeledStatementContext;

LabeledStatementContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

LabeledStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

LabeledStatementContext.prototype.constantExpression = function() {
    return this.getTypedRuleContext(ConstantExpressionContext,0);
};

LabeledStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterLabeledStatement(this);
	}
};

LabeledStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitLabeledStatement(this);
	}
};




CParser.LabeledStatementContext = LabeledStatementContext;

CParser.prototype.labeledStatement = function() {

    var localctx = new LabeledStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, CParser.RULE_labeledStatement);
    try {
        this.state = 902;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 891;
            this.match(CParser.Identifier);
            this.state = 892;
            this.match(CParser.Colon);
            this.state = 893;
            this.statement();
            break;
        case CParser.Case:
            this.enterOuterAlt(localctx, 2);
            this.state = 894;
            this.match(CParser.Case);
            this.state = 895;
            this.constantExpression();
            this.state = 896;
            this.match(CParser.Colon);
            this.state = 897;
            this.statement();
            break;
        case CParser.Default:
            this.enterOuterAlt(localctx, 3);
            this.state = 899;
            this.match(CParser.Default);
            this.state = 900;
            this.match(CParser.Colon);
            this.state = 901;
            this.statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CompoundStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_compoundStatement;
    return this;
}

CompoundStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompoundStatementContext.prototype.constructor = CompoundStatementContext;

CompoundStatementContext.prototype.blockItemList = function() {
    return this.getTypedRuleContext(BlockItemListContext,0);
};

CompoundStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterCompoundStatement(this);
	}
};

CompoundStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitCompoundStatement(this);
	}
};




CParser.CompoundStatementContext = CompoundStatementContext;

CParser.prototype.compoundStatement = function() {

    var localctx = new CompoundStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, CParser.RULE_compoundStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 904;
        this.match(CParser.LeftBrace);
        this.state = 906;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Return) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Switch - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)) | (1 << (CParser.While - 32)) | (1 << (CParser.LeftParen - 32)) | (1 << (CParser.LeftBrace - 32)) | (1 << (CParser.Plus - 32)) | (1 << (CParser.PlusPlus - 32)) | (1 << (CParser.Minus - 32)) | (1 << (CParser.MinusMinus - 32)) | (1 << (CParser.Star - 32)) | (1 << (CParser.And - 32)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Semi - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) !== 0)) {
            this.state = 905;
            this.blockItemList(0);
        }

        this.state = 908;
        this.match(CParser.RightBrace);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockItemListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_blockItemList;
    return this;
}

BlockItemListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockItemListContext.prototype.constructor = BlockItemListContext;

BlockItemListContext.prototype.blockItem = function() {
    return this.getTypedRuleContext(BlockItemContext,0);
};

BlockItemListContext.prototype.blockItemList = function() {
    return this.getTypedRuleContext(BlockItemListContext,0);
};

BlockItemListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterBlockItemList(this);
	}
};

BlockItemListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitBlockItemList(this);
	}
};



CParser.prototype.blockItemList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new BlockItemListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 128;
    this.enterRecursionRule(localctx, 128, CParser.RULE_blockItemList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 911;
        this.blockItem();
        this._ctx.stop = this._input.LT(-1);
        this.state = 917;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,97,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new BlockItemListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_blockItemList);
                this.state = 913;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 914;
                this.blockItem(); 
            }
            this.state = 919;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,97,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function BlockItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_blockItem;
    return this;
}

BlockItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockItemContext.prototype.constructor = BlockItemContext;

BlockItemContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

BlockItemContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

BlockItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterBlockItem(this);
	}
};

BlockItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitBlockItem(this);
	}
};




CParser.BlockItemContext = BlockItemContext;

CParser.prototype.blockItem = function() {

    var localctx = new BlockItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, CParser.RULE_blockItem);
    try {
        this.state = 922;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 920;
            this.statement();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 921;
            this.declaration();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_expressionStatement;
    return this;
}

ExpressionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

ExpressionStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterExpressionStatement(this);
	}
};

ExpressionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitExpressionStatement(this);
	}
};




CParser.ExpressionStatementContext = ExpressionStatementContext;

CParser.prototype.expressionStatement = function() {

    var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, CParser.RULE_expressionStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 925;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (CParser.Sizeof - 31)) | (1 << (CParser.LeftParen - 31)) | (1 << (CParser.Plus - 31)) | (1 << (CParser.PlusPlus - 31)) | (1 << (CParser.Minus - 31)) | (1 << (CParser.MinusMinus - 31)) | (1 << (CParser.Star - 31)) | (1 << (CParser.And - 31)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) !== 0)) {
            this.state = 924;
            this.expression(0);
        }

        this.state = 927;
        this.match(CParser.Semi);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_selectionStatement;
    return this;
}

SelectionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectionStatementContext.prototype.constructor = SelectionStatementContext;

SelectionStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SelectionStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

SelectionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterSelectionStatement(this);
	}
};

SelectionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitSelectionStatement(this);
	}
};




CParser.SelectionStatementContext = SelectionStatementContext;

CParser.prototype.selectionStatement = function() {

    var localctx = new SelectionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, CParser.RULE_selectionStatement);
    try {
        this.state = 944;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CParser.If:
            this.enterOuterAlt(localctx, 1);
            this.state = 929;
            this.match(CParser.If);
            this.state = 930;
            this.match(CParser.LeftParen);
            this.state = 931;
            this.expression(0);
            this.state = 932;
            this.match(CParser.RightParen);
            this.state = 933;
            this.statement();
            this.state = 936;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
            if(la_===1) {
                this.state = 934;
                this.match(CParser.Else);
                this.state = 935;
                this.statement();

            }
            break;
        case CParser.Switch:
            this.enterOuterAlt(localctx, 2);
            this.state = 938;
            this.match(CParser.Switch);
            this.state = 939;
            this.match(CParser.LeftParen);
            this.state = 940;
            this.expression(0);
            this.state = 941;
            this.match(CParser.RightParen);
            this.state = 942;
            this.statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IterationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_iterationStatement;
    return this;
}

IterationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IterationStatementContext.prototype.constructor = IterationStatementContext;

IterationStatementContext.prototype.While = function() {
    return this.getToken(CParser.While, 0);
};

IterationStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IterationStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

IterationStatementContext.prototype.Do = function() {
    return this.getToken(CParser.Do, 0);
};

IterationStatementContext.prototype.For = function() {
    return this.getToken(CParser.For, 0);
};

IterationStatementContext.prototype.forCondition = function() {
    return this.getTypedRuleContext(ForConditionContext,0);
};

IterationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterIterationStatement(this);
	}
};

IterationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitIterationStatement(this);
	}
};




CParser.IterationStatementContext = IterationStatementContext;

CParser.prototype.iterationStatement = function() {

    var localctx = new IterationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, CParser.RULE_iterationStatement);
    try {
        this.state = 966;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case CParser.While:
            this.enterOuterAlt(localctx, 1);
            this.state = 946;
            this.match(CParser.While);
            this.state = 947;
            this.match(CParser.LeftParen);
            this.state = 948;
            this.expression(0);
            this.state = 949;
            this.match(CParser.RightParen);
            this.state = 950;
            this.statement();
            break;
        case CParser.Do:
            this.enterOuterAlt(localctx, 2);
            this.state = 952;
            this.match(CParser.Do);
            this.state = 953;
            this.statement();
            this.state = 954;
            this.match(CParser.While);
            this.state = 955;
            this.match(CParser.LeftParen);
            this.state = 956;
            this.expression(0);
            this.state = 957;
            this.match(CParser.RightParen);
            this.state = 958;
            this.match(CParser.Semi);
            break;
        case CParser.For:
            this.enterOuterAlt(localctx, 3);
            this.state = 960;
            this.match(CParser.For);
            this.state = 961;
            this.match(CParser.LeftParen);
            this.state = 962;
            this.forCondition();
            this.state = 963;
            this.match(CParser.RightParen);
            this.state = 964;
            this.statement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_forCondition;
    return this;
}

ForConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForConditionContext.prototype.constructor = ForConditionContext;

ForConditionContext.prototype.forDeclaration = function() {
    return this.getTypedRuleContext(ForDeclarationContext,0);
};

ForConditionContext.prototype.forExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ForExpressionContext);
    } else {
        return this.getTypedRuleContext(ForExpressionContext,i);
    }
};

ForConditionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ForConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterForCondition(this);
	}
};

ForConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitForCondition(this);
	}
};




CParser.ForConditionContext = ForConditionContext;

CParser.prototype.forCondition = function() {

    var localctx = new ForConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, CParser.RULE_forCondition);
    var _la = 0; // Token type
    try {
        this.state = 988;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 968;
            this.forDeclaration();
            this.state = 969;
            this.match(CParser.Semi);
            this.state = 971;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (CParser.Sizeof - 31)) | (1 << (CParser.LeftParen - 31)) | (1 << (CParser.Plus - 31)) | (1 << (CParser.PlusPlus - 31)) | (1 << (CParser.Minus - 31)) | (1 << (CParser.MinusMinus - 31)) | (1 << (CParser.Star - 31)) | (1 << (CParser.And - 31)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) !== 0)) {
                this.state = 970;
                this.forExpression(0);
            }

            this.state = 973;
            this.match(CParser.Semi);
            this.state = 975;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (CParser.Sizeof - 31)) | (1 << (CParser.LeftParen - 31)) | (1 << (CParser.Plus - 31)) | (1 << (CParser.PlusPlus - 31)) | (1 << (CParser.Minus - 31)) | (1 << (CParser.MinusMinus - 31)) | (1 << (CParser.Star - 31)) | (1 << (CParser.And - 31)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) !== 0)) {
                this.state = 974;
                this.forExpression(0);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 978;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (CParser.Sizeof - 31)) | (1 << (CParser.LeftParen - 31)) | (1 << (CParser.Plus - 31)) | (1 << (CParser.PlusPlus - 31)) | (1 << (CParser.Minus - 31)) | (1 << (CParser.MinusMinus - 31)) | (1 << (CParser.Star - 31)) | (1 << (CParser.And - 31)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) !== 0)) {
                this.state = 977;
                this.expression(0);
            }

            this.state = 980;
            this.match(CParser.Semi);
            this.state = 982;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (CParser.Sizeof - 31)) | (1 << (CParser.LeftParen - 31)) | (1 << (CParser.Plus - 31)) | (1 << (CParser.PlusPlus - 31)) | (1 << (CParser.Minus - 31)) | (1 << (CParser.MinusMinus - 31)) | (1 << (CParser.Star - 31)) | (1 << (CParser.And - 31)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) !== 0)) {
                this.state = 981;
                this.forExpression(0);
            }

            this.state = 984;
            this.match(CParser.Semi);
            this.state = 986;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (CParser.Sizeof - 31)) | (1 << (CParser.LeftParen - 31)) | (1 << (CParser.Plus - 31)) | (1 << (CParser.PlusPlus - 31)) | (1 << (CParser.Minus - 31)) | (1 << (CParser.MinusMinus - 31)) | (1 << (CParser.Star - 31)) | (1 << (CParser.And - 31)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) !== 0)) {
                this.state = 985;
                this.forExpression(0);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_forDeclaration;
    return this;
}

ForDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForDeclarationContext.prototype.constructor = ForDeclarationContext;

ForDeclarationContext.prototype.declarationSpecifiers = function() {
    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
};

ForDeclarationContext.prototype.initDeclaratorList = function() {
    return this.getTypedRuleContext(InitDeclaratorListContext,0);
};

ForDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterForDeclaration(this);
	}
};

ForDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitForDeclaration(this);
	}
};




CParser.ForDeclarationContext = ForDeclarationContext;

CParser.prototype.forDeclaration = function() {

    var localctx = new ForDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, CParser.RULE_forDeclaration);
    try {
        this.state = 994;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 990;
            this.declarationSpecifiers();
            this.state = 991;
            this.initDeclaratorList(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 993;
            this.declarationSpecifiers();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_forExpression;
    return this;
}

ForExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForExpressionContext.prototype.constructor = ForExpressionContext;

ForExpressionContext.prototype.assignmentExpression = function() {
    return this.getTypedRuleContext(AssignmentExpressionContext,0);
};

ForExpressionContext.prototype.forExpression = function() {
    return this.getTypedRuleContext(ForExpressionContext,0);
};

ForExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterForExpression(this);
	}
};

ForExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitForExpression(this);
	}
};



CParser.prototype.forExpression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ForExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 142;
    this.enterRecursionRule(localctx, 142, CParser.RULE_forExpression, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 997;
        this.assignmentExpression();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1004;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,110,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new ForExpressionContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_forExpression);
                this.state = 999;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1000;
                this.match(CParser.Comma);
                this.state = 1001;
                this.assignmentExpression(); 
            }
            this.state = 1006;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,110,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function JumpStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_jumpStatement;
    return this;
}

JumpStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JumpStatementContext.prototype.constructor = JumpStatementContext;

JumpStatementContext.prototype.Identifier = function() {
    return this.getToken(CParser.Identifier, 0);
};

JumpStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

JumpStatementContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

JumpStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterJumpStatement(this);
	}
};

JumpStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitJumpStatement(this);
	}
};




CParser.JumpStatementContext = JumpStatementContext;

CParser.prototype.jumpStatement = function() {

    var localctx = new JumpStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, CParser.RULE_jumpStatement);
    var _la = 0; // Token type
    try {
        this.state = 1023;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1007;
            this.match(CParser.Goto);
            this.state = 1008;
            this.match(CParser.Identifier);
            this.state = 1009;
            this.match(CParser.Semi);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1010;
            this.match(CParser.Continue);
            this.state = 1011;
            this.match(CParser.Semi);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1012;
            this.match(CParser.Break);
            this.state = 1013;
            this.match(CParser.Semi);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1014;
            this.match(CParser.Return);
            this.state = 1016;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 31)) & ~0x1f) == 0 && ((1 << (_la - 31)) & ((1 << (CParser.Sizeof - 31)) | (1 << (CParser.LeftParen - 31)) | (1 << (CParser.Plus - 31)) | (1 << (CParser.PlusPlus - 31)) | (1 << (CParser.Minus - 31)) | (1 << (CParser.MinusMinus - 31)) | (1 << (CParser.Star - 31)) | (1 << (CParser.And - 31)))) !== 0) || ((((_la - 65)) & ~0x1f) == 0 && ((1 << (_la - 65)) & ((1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) !== 0)) {
                this.state = 1015;
                this.expression(0);
            }

            this.state = 1018;
            this.match(CParser.Semi);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1019;
            this.match(CParser.Goto);
            this.state = 1020;
            this.unaryExpression();
            this.state = 1021;
            this.match(CParser.Semi);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CompilationUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_compilationUnit;
    return this;
}

CompilationUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CompilationUnitContext.prototype.constructor = CompilationUnitContext;

CompilationUnitContext.prototype.EOF = function() {
    return this.getToken(CParser.EOF, 0);
};

CompilationUnitContext.prototype.translationUnit = function() {
    return this.getTypedRuleContext(TranslationUnitContext,0);
};

CompilationUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterCompilationUnit(this);
	}
};

CompilationUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitCompilationUnit(this);
	}
};




CParser.CompilationUnitContext = CompilationUnitContext;

CParser.prototype.compilationUnit = function() {

    var localctx = new CompilationUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, CParser.RULE_compilationUnit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1026;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)) | (1 << (CParser.LeftParen - 32)) | (1 << (CParser.Star - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (CParser.Caret - 64)) | (1 << (CParser.Semi - 64)) | (1 << (CParser.Identifier - 64)))) !== 0)) {
            this.state = 1025;
            this.translationUnit(0);
        }

        this.state = 1028;
        this.match(CParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TranslationUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_translationUnit;
    return this;
}

TranslationUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TranslationUnitContext.prototype.constructor = TranslationUnitContext;

TranslationUnitContext.prototype.externalDeclaration = function() {
    return this.getTypedRuleContext(ExternalDeclarationContext,0);
};

TranslationUnitContext.prototype.translationUnit = function() {
    return this.getTypedRuleContext(TranslationUnitContext,0);
};

TranslationUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterTranslationUnit(this);
	}
};

TranslationUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitTranslationUnit(this);
	}
};



CParser.prototype.translationUnit = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TranslationUnitContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 148;
    this.enterRecursionRule(localctx, 148, CParser.RULE_translationUnit, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1031;
        this.externalDeclaration();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1037;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,114,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TranslationUnitContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_translationUnit);
                this.state = 1033;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1034;
                this.externalDeclaration(); 
            }
            this.state = 1039;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,114,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function ExternalDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_externalDeclaration;
    return this;
}

ExternalDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExternalDeclarationContext.prototype.constructor = ExternalDeclarationContext;

ExternalDeclarationContext.prototype.functionDefinition = function() {
    return this.getTypedRuleContext(FunctionDefinitionContext,0);
};

ExternalDeclarationContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

ExternalDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterExternalDeclaration(this);
	}
};

ExternalDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitExternalDeclaration(this);
	}
};




CParser.ExternalDeclarationContext = ExternalDeclarationContext;

CParser.prototype.externalDeclaration = function() {

    var localctx = new ExternalDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, CParser.RULE_externalDeclaration);
    try {
        this.state = 1043;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1040;
            this.functionDefinition();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1041;
            this.declaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1042;
            this.match(CParser.Semi);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_functionDefinition;
    return this;
}

FunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDefinitionContext.prototype.constructor = FunctionDefinitionContext;

FunctionDefinitionContext.prototype.declarator = function() {
    return this.getTypedRuleContext(DeclaratorContext,0);
};

FunctionDefinitionContext.prototype.compoundStatement = function() {
    return this.getTypedRuleContext(CompoundStatementContext,0);
};

FunctionDefinitionContext.prototype.declarationSpecifiers = function() {
    return this.getTypedRuleContext(DeclarationSpecifiersContext,0);
};

FunctionDefinitionContext.prototype.declarationList = function() {
    return this.getTypedRuleContext(DeclarationListContext,0);
};

FunctionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterFunctionDefinition(this);
	}
};

FunctionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitFunctionDefinition(this);
	}
};




CParser.FunctionDefinitionContext = FunctionDefinitionContext;

CParser.prototype.functionDefinition = function() {

    var localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, CParser.RULE_functionDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1046;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
        if(la_===1) {
            this.state = 1045;
            this.declarationSpecifiers();

        }
        this.state = 1048;
        this.declarator();
        this.state = 1050;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (CParser.Static - 32)) | (1 << (CParser.Struct - 32)) | (1 << (CParser.Typedef - 32)) | (1 << (CParser.Union - 32)) | (1 << (CParser.Unsigned - 32)) | (1 << (CParser.Void - 32)) | (1 << (CParser.Volatile - 32)))) !== 0) || _la===CParser.Identifier) {
            this.state = 1049;
            this.declarationList(0);
        }

        this.state = 1052;
        this.compoundStatement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeclarationListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CParser.RULE_declarationList;
    return this;
}

DeclarationListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeclarationListContext.prototype.constructor = DeclarationListContext;

DeclarationListContext.prototype.declaration = function() {
    return this.getTypedRuleContext(DeclarationContext,0);
};

DeclarationListContext.prototype.declarationList = function() {
    return this.getTypedRuleContext(DeclarationListContext,0);
};

DeclarationListContext.prototype.enterRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.enterDeclarationList(this);
	}
};

DeclarationListContext.prototype.exitRule = function(listener) {
    if(listener instanceof CListener ) {
        listener.exitDeclarationList(this);
	}
};



CParser.prototype.declarationList = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new DeclarationListContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 154;
    this.enterRecursionRule(localctx, 154, CParser.RULE_declarationList, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1055;
        this.declaration();
        this._ctx.stop = this._input.LT(-1);
        this.state = 1061;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,118,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new DeclarationListContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, CParser.RULE_declarationList);
                this.state = 1057;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1058;
                this.declaration(); 
            }
            this.state = 1063;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,118,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


CParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 1:
			return this.postfixExpression_sempred(localctx, predIndex);
	case 2:
			return this.argumentExpressionList_sempred(localctx, predIndex);
	case 6:
			return this.multiplicativeExpression_sempred(localctx, predIndex);
	case 7:
			return this.additiveExpression_sempred(localctx, predIndex);
	case 8:
			return this.shiftExpression_sempred(localctx, predIndex);
	case 9:
			return this.relationalExpression_sempred(localctx, predIndex);
	case 10:
			return this.equalityExpression_sempred(localctx, predIndex);
	case 11:
			return this.andExpression_sempred(localctx, predIndex);
	case 12:
			return this.exclusiveOrExpression_sempred(localctx, predIndex);
	case 13:
			return this.inclusiveOrExpression_sempred(localctx, predIndex);
	case 14:
			return this.logicalAndExpression_sempred(localctx, predIndex);
	case 15:
			return this.logicalOrExpression_sempred(localctx, predIndex);
	case 19:
			return this.expression_sempred(localctx, predIndex);
	case 25:
			return this.initDeclaratorList_sempred(localctx, predIndex);
	case 31:
			return this.structDeclarationList_sempred(localctx, predIndex);
	case 34:
			return this.structDeclaratorList_sempred(localctx, predIndex);
	case 37:
			return this.enumeratorList_sempred(localctx, predIndex);
	case 45:
			return this.directDeclarator_sempred(localctx, predIndex);
	case 46:
			return this.pointer_sempred(localctx, predIndex);
	case 47:
			return this.typeQualifierList_sempred(localctx, predIndex);
	case 49:
			return this.parameterList_sempred(localctx, predIndex);
	case 51:
			return this.identifierList_sempred(localctx, predIndex);
	case 54:
			return this.directAbstractDeclarator_sempred(localctx, predIndex);
	case 57:
			return this.initializerList_sempred(localctx, predIndex);
	case 59:
			return this.designatorList_sempred(localctx, predIndex);
	case 64:
			return this.blockItemList_sempred(localctx, predIndex);
	case 71:
			return this.forExpression_sempred(localctx, predIndex);
	case 74:
			return this.translationUnit_sempred(localctx, predIndex);
	case 77:
			return this.declarationList_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

CParser.prototype.postfixExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 8);
		case 1:
			return this.precpred(this._ctx, 7);
		case 2:
			return this.precpred(this._ctx, 6);
		case 3:
			return this.precpred(this._ctx, 5);
		case 4:
			return this.precpred(this._ctx, 4);
		case 5:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.argumentExpressionList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 6:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.multiplicativeExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 7:
			return this.precpred(this._ctx, 3);
		case 8:
			return this.precpred(this._ctx, 2);
		case 9:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.additiveExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 10:
			return this.precpred(this._ctx, 2);
		case 11:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.shiftExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 12:
			return this.precpred(this._ctx, 2);
		case 13:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.relationalExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 14:
			return this.precpred(this._ctx, 4);
		case 15:
			return this.precpred(this._ctx, 3);
		case 16:
			return this.precpred(this._ctx, 2);
		case 17:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.equalityExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 18:
			return this.precpred(this._ctx, 2);
		case 19:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.andExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 20:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.exclusiveOrExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 21:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.inclusiveOrExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 22:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.logicalAndExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 23:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.logicalOrExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 24:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 25:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.initDeclaratorList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 26:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.structDeclarationList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 27:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.structDeclaratorList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 28:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.enumeratorList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 29:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.directDeclarator_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 30:
			return this.precpred(this._ctx, 5);
		case 31:
			return this.precpred(this._ctx, 4);
		case 32:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.pointer_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 33:
			return this.precpred(this._ctx, 3);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.typeQualifierList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 34:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.parameterList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 35:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.identifierList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 36:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.directAbstractDeclarator_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 37:
			return this.precpred(this._ctx, 5);
		case 38:
			return this.precpred(this._ctx, 4);
		case 39:
			return this.precpred(this._ctx, 3);
		case 40:
			return this.precpred(this._ctx, 2);
		case 41:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.initializerList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 42:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.designatorList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 43:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.blockItemList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 44:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.forExpression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 45:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.translationUnit_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 46:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

CParser.prototype.declarationList_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 47:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.CParser = CParser;
